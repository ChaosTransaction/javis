// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: depth_market.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "depth_market.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace simnow_logic {
class DepthMarketDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DepthMarket>
     _instance;
} _DepthMarket_default_instance_;

namespace protobuf_depth_5fmarket_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, trading_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, exchange_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, exchange_symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, last_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, pre_settlement_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, pre_close_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, pre_open_interest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, open_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, highest_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, lowest_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, turnover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, open_interest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, close_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, settlement_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, upper_limit_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, lower_limit_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, pre_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, curr_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, update_millisec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, average_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, current_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, action_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, instrument_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_price_one_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_volume_one_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_price_one_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_volume_one_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_price_two_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_volume_two_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_price_two_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_volume_two_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_price_three_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_volume_three_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_price_three_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_volume_three_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_price_four_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_volume_four_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_price_four_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_volume_four_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_price_five_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_volume_five_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_price_five_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_volume_five_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_price_six_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_volume_six_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_price_six_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_volume_six_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_price_seven_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_volume_seven_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_price_seven_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_volume_seven_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_price_eight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_volume_eight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_price_eight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_volume_eight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_price_nine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_volume_nine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_price_nine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_volume_nine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_price_ten_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, bid_volume_ten_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_price_ten_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarket, ask_volume_ten_),
  0,
  1,
  2,
  3,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  4,
  26,
  24,
  25,
  5,
  6,
  7,
  28,
  27,
  29,
  31,
  30,
  32,
  33,
  35,
  34,
  36,
  37,
  39,
  38,
  40,
  41,
  43,
  42,
  44,
  45,
  47,
  46,
  48,
  49,
  51,
  50,
  52,
  53,
  55,
  54,
  56,
  57,
  59,
  58,
  60,
  61,
  63,
  62,
  64,
  65,
  66,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 72, sizeof(DepthMarket)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DepthMarket_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "depth_market.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DepthMarket_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DepthMarket_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022depth_market.proto\022\014simnow_logic\"\270\014\n\013D"
      "epthMarket\022\023\n\013trading_day\030\001 \002(\014\022\016\n\006symbo"
      "l\030\002 \002(\014\022\023\n\013exchange_id\030\003 \002(\014\022\027\n\017exchange"
      "_symbol\030\004 \002(\014\022\022\n\nlast_price\030\005 \002(\001\022\034\n\024pre"
      "_settlement_price\030\006 \002(\001\022\027\n\017pre_close_pri"
      "ce\030\007 \002(\001\022\031\n\021pre_open_interest\030\010 \002(\001\022\022\n\no"
      "pen_price\030\t \002(\001\022\025\n\rhighest_price\030\n \002(\001\022\024"
      "\n\014lowest_price\030\013 \002(\001\022\016\n\006volume\030\014 \002(\001\022\020\n\010"
      "turnover\030\r \002(\001\022\025\n\ropen_interest\030\016 \002(\001\022\023\n"
      "\013close_price\030\017 \002(\001\022\030\n\020settlement_price\030\020"
      " \002(\001\022\031\n\021upper_limit_price\030\021 \002(\001\022\031\n\021lower"
      "_limit_price\030\022 \002(\001\022\021\n\tpre_delta\030\023 \002(\001\022\022\n"
      "\ncurr_delta\030\024 \002(\001\022\023\n\013update_time\030\025 \002(\014\022\027"
      "\n\017update_millisec\030\026 \002(\005\022\025\n\raverage_price"
      "\030\027 \002(\001\022\024\n\014current_time\030\030 \002(\003\022\022\n\naction_d"
      "ay\030\031 \002(\014\022\027\n\017instrument_name\030\032 \002(\014\022\022\n\npro"
      "duct_id\030\033 \002(\014\022\025\n\rbid_price_one\030\034 \002(\001\022\026\n\016"
      "bid_volume_one\030\035 \002(\005\022\025\n\rask_price_one\030\036 "
      "\002(\001\022\026\n\016ask_volume_one\030\037 \002(\005\022\025\n\rbid_price"
      "_two\030  \002(\001\022\026\n\016bid_volume_two\030! \002(\005\022\025\n\ras"
      "k_price_two\030\" \002(\001\022\026\n\016ask_volume_two\030# \002("
      "\005\022\027\n\017bid_price_three\030$ \002(\001\022\030\n\020bid_volume"
      "_three\030% \002(\005\022\027\n\017ask_price_three\030& \002(\001\022\030\n"
      "\020ask_volume_three\030\' \002(\005\022\026\n\016bid_price_fou"
      "r\030( \002(\001\022\027\n\017bid_volume_four\030) \002(\005\022\026\n\016ask_"
      "price_four\030* \002(\001\022\027\n\017ask_volume_four\030+ \002("
      "\005\022\026\n\016bid_price_five\030, \002(\001\022\027\n\017bid_volume_"
      "five\030- \002(\005\022\026\n\016ask_price_five\030. \002(\001\022\027\n\017as"
      "k_volume_five\030/ \002(\005\022\025\n\rbid_price_six\0300 \002"
      "(\001\022\026\n\016bid_volume_six\0301 \002(\005\022\025\n\rask_price_"
      "six\0302 \002(\001\022\026\n\016ask_volume_six\0303 \002(\005\022\027\n\017bid"
      "_price_seven\0304 \002(\001\022\030\n\020bid_volume_seven\0305"
      " \002(\005\022\027\n\017ask_price_seven\0306 \002(\001\022\030\n\020ask_vol"
      "ume_seven\0307 \002(\005\022\027\n\017bid_price_eight\0308 \002(\001"
      "\022\030\n\020bid_volume_eight\0309 \002(\005\022\027\n\017ask_price_"
      "eight\030: \002(\001\022\030\n\020ask_volume_eight\030; \002(\005\022\026\n"
      "\016bid_price_nine\030< \002(\001\022\027\n\017bid_volume_nine"
      "\030= \002(\005\022\026\n\016ask_price_nine\030> \002(\001\022\027\n\017ask_vo"
      "lume_nine\030\? \002(\005\022\025\n\rbid_price_ten\030@ \002(\001\022\026"
      "\n\016bid_volume_ten\030A \002(\005\022\025\n\rask_price_ten\030"
      "B \002(\001\022\026\n\016ask_volume_ten\030C \002(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1629);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "depth_market.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_depth_5fmarket_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepthMarket::kTradingDayFieldNumber;
const int DepthMarket::kSymbolFieldNumber;
const int DepthMarket::kExchangeIdFieldNumber;
const int DepthMarket::kExchangeSymbolFieldNumber;
const int DepthMarket::kLastPriceFieldNumber;
const int DepthMarket::kPreSettlementPriceFieldNumber;
const int DepthMarket::kPreClosePriceFieldNumber;
const int DepthMarket::kPreOpenInterestFieldNumber;
const int DepthMarket::kOpenPriceFieldNumber;
const int DepthMarket::kHighestPriceFieldNumber;
const int DepthMarket::kLowestPriceFieldNumber;
const int DepthMarket::kVolumeFieldNumber;
const int DepthMarket::kTurnoverFieldNumber;
const int DepthMarket::kOpenInterestFieldNumber;
const int DepthMarket::kClosePriceFieldNumber;
const int DepthMarket::kSettlementPriceFieldNumber;
const int DepthMarket::kUpperLimitPriceFieldNumber;
const int DepthMarket::kLowerLimitPriceFieldNumber;
const int DepthMarket::kPreDeltaFieldNumber;
const int DepthMarket::kCurrDeltaFieldNumber;
const int DepthMarket::kUpdateTimeFieldNumber;
const int DepthMarket::kUpdateMillisecFieldNumber;
const int DepthMarket::kAveragePriceFieldNumber;
const int DepthMarket::kCurrentTimeFieldNumber;
const int DepthMarket::kActionDayFieldNumber;
const int DepthMarket::kInstrumentNameFieldNumber;
const int DepthMarket::kProductIdFieldNumber;
const int DepthMarket::kBidPriceOneFieldNumber;
const int DepthMarket::kBidVolumeOneFieldNumber;
const int DepthMarket::kAskPriceOneFieldNumber;
const int DepthMarket::kAskVolumeOneFieldNumber;
const int DepthMarket::kBidPriceTwoFieldNumber;
const int DepthMarket::kBidVolumeTwoFieldNumber;
const int DepthMarket::kAskPriceTwoFieldNumber;
const int DepthMarket::kAskVolumeTwoFieldNumber;
const int DepthMarket::kBidPriceThreeFieldNumber;
const int DepthMarket::kBidVolumeThreeFieldNumber;
const int DepthMarket::kAskPriceThreeFieldNumber;
const int DepthMarket::kAskVolumeThreeFieldNumber;
const int DepthMarket::kBidPriceFourFieldNumber;
const int DepthMarket::kBidVolumeFourFieldNumber;
const int DepthMarket::kAskPriceFourFieldNumber;
const int DepthMarket::kAskVolumeFourFieldNumber;
const int DepthMarket::kBidPriceFiveFieldNumber;
const int DepthMarket::kBidVolumeFiveFieldNumber;
const int DepthMarket::kAskPriceFiveFieldNumber;
const int DepthMarket::kAskVolumeFiveFieldNumber;
const int DepthMarket::kBidPriceSixFieldNumber;
const int DepthMarket::kBidVolumeSixFieldNumber;
const int DepthMarket::kAskPriceSixFieldNumber;
const int DepthMarket::kAskVolumeSixFieldNumber;
const int DepthMarket::kBidPriceSevenFieldNumber;
const int DepthMarket::kBidVolumeSevenFieldNumber;
const int DepthMarket::kAskPriceSevenFieldNumber;
const int DepthMarket::kAskVolumeSevenFieldNumber;
const int DepthMarket::kBidPriceEightFieldNumber;
const int DepthMarket::kBidVolumeEightFieldNumber;
const int DepthMarket::kAskPriceEightFieldNumber;
const int DepthMarket::kAskVolumeEightFieldNumber;
const int DepthMarket::kBidPriceNineFieldNumber;
const int DepthMarket::kBidVolumeNineFieldNumber;
const int DepthMarket::kAskPriceNineFieldNumber;
const int DepthMarket::kAskVolumeNineFieldNumber;
const int DepthMarket::kBidPriceTenFieldNumber;
const int DepthMarket::kBidVolumeTenFieldNumber;
const int DepthMarket::kAskPriceTenFieldNumber;
const int DepthMarket::kAskVolumeTenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepthMarket::DepthMarket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_depth_5fmarket_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:simnow_logic.DepthMarket)
}
DepthMarket::DepthMarket(const DepthMarket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trading_day()) {
    trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
  }
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_id()) {
    exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
  }
  exchange_symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exchange_symbol()) {
    exchange_symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_symbol_);
  }
  update_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_update_time()) {
    update_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_time_);
  }
  action_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_action_day()) {
    action_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_day_);
  }
  instrument_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_instrument_name()) {
    instrument_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_name_);
  }
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_product_id()) {
    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
  ::memcpy(&last_price_, &from.last_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&ask_volume_ten_) -
    reinterpret_cast<char*>(&last_price_)) + sizeof(ask_volume_ten_));
  // @@protoc_insertion_point(copy_constructor:simnow_logic.DepthMarket)
}

void DepthMarket::SharedCtor() {
  _cached_size_ = 0;
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ask_volume_ten_) -
      reinterpret_cast<char*>(&last_price_)) + sizeof(ask_volume_ten_));
}

DepthMarket::~DepthMarket() {
  // @@protoc_insertion_point(destructor:simnow_logic.DepthMarket)
  SharedDtor();
}

void DepthMarket::SharedDtor() {
  trading_day_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_day_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DepthMarket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepthMarket::descriptor() {
  protobuf_depth_5fmarket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_depth_5fmarket_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DepthMarket& DepthMarket::default_instance() {
  protobuf_depth_5fmarket_2eproto::InitDefaults();
  return *internal_default_instance();
}

DepthMarket* DepthMarket::New(::google::protobuf::Arena* arena) const {
  DepthMarket* n = new DepthMarket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DepthMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:simnow_logic.DepthMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!trading_day_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*trading_day_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!symbol_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*symbol_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!exchange_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*exchange_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!exchange_symbol_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*exchange_symbol_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!update_time_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*update_time_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!action_day_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*action_day_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!instrument_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*instrument_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!product_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*product_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&last_price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&volume_) -
        reinterpret_cast<char*>(&last_price_)) + sizeof(volume_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&turnover_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curr_delta_) -
        reinterpret_cast<char*>(&turnover_)) + sizeof(curr_delta_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&average_price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ask_volume_one_) -
        reinterpret_cast<char*>(&average_price_)) + sizeof(ask_volume_one_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&bid_volume_two_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ask_volume_three_) -
        reinterpret_cast<char*>(&bid_volume_two_)) + sizeof(ask_volume_three_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&bid_volume_four_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ask_volume_five_) -
        reinterpret_cast<char*>(&bid_volume_four_)) + sizeof(ask_volume_five_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&bid_volume_six_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ask_volume_seven_) -
        reinterpret_cast<char*>(&bid_volume_six_)) + sizeof(ask_volume_seven_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&bid_volume_eight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ask_volume_nine_) -
        reinterpret_cast<char*>(&bid_volume_eight_)) + sizeof(ask_volume_nine_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 7u) {
    ::memset(&bid_volume_ten_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ask_volume_ten_) -
        reinterpret_cast<char*>(&bid_volume_ten_)) + sizeof(ask_volume_ten_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DepthMarket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simnow_logic.DepthMarket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes trading_day = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trading_day()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes exchange_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exchange_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes exchange_symbol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exchange_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double last_price = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_last_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double pre_settlement_price = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_pre_settlement_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_settlement_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double pre_close_price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_pre_close_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_close_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double pre_open_interest = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_pre_open_interest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_open_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double open_price = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_open_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double highest_price = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_highest_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highest_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double lowest_price = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_lowest_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowest_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double volume = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double turnover = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_turnover();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double open_interest = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_open_interest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double close_price = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_close_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double settlement_price = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_settlement_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlement_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double upper_limit_price = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_upper_limit_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upper_limit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double lower_limit_price = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_lower_limit_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lower_limit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double pre_delta = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_pre_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double curr_delta = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_curr_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curr_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes update_time = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 update_millisec = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_update_millisec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_millisec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double average_price = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_average_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 current_time = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_current_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes action_day = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_action_day()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes instrument_name = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_instrument_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes product_id = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_product_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bid_price_one = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {
          set_has_bid_price_one();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_one_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bid_volume_one = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_bid_volume_one();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_volume_one_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double ask_price_one = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {
          set_has_ask_price_one();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_one_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ask_volume_one = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_ask_volume_one();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_volume_one_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bid_price_two = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {
          set_has_bid_price_two();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_two_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bid_volume_two = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_bid_volume_two();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_volume_two_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double ask_price_two = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {
          set_has_ask_price_two();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_two_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ask_volume_two = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_ask_volume_two();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_volume_two_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bid_price_three = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 289 & 0xFF */)) {
          set_has_bid_price_three();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_three_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bid_volume_three = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_bid_volume_three();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_volume_three_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double ask_price_three = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 305 & 0xFF */)) {
          set_has_ask_price_three();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_three_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ask_volume_three = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          set_has_ask_volume_three();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_volume_three_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bid_price_four = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 321 & 0xFF */)) {
          set_has_bid_price_four();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_four_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bid_volume_four = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_bid_volume_four();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_volume_four_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double ask_price_four = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 337 & 0xFF */)) {
          set_has_ask_price_four();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_four_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ask_volume_four = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_ask_volume_four();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_volume_four_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bid_price_five = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 353 & 0xFF */)) {
          set_has_bid_price_five();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_five_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bid_volume_five = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          set_has_bid_volume_five();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_volume_five_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double ask_price_five = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 369 & 0xFF */)) {
          set_has_ask_price_five();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_five_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ask_volume_five = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {
          set_has_ask_volume_five();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_volume_five_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bid_price_six = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 385 & 0xFF */)) {
          set_has_bid_price_six();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_six_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bid_volume_six = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 392 & 0xFF */)) {
          set_has_bid_volume_six();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_volume_six_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double ask_price_six = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 401 & 0xFF */)) {
          set_has_ask_price_six();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_six_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ask_volume_six = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {
          set_has_ask_volume_six();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_volume_six_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bid_price_seven = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 417 & 0xFF */)) {
          set_has_bid_price_seven();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_seven_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bid_volume_seven = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          set_has_bid_volume_seven();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_volume_seven_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double ask_price_seven = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 433 & 0xFF */)) {
          set_has_ask_price_seven();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_seven_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ask_volume_seven = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {
          set_has_ask_volume_seven();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_volume_seven_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bid_price_eight = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 449 & 0xFF */)) {
          set_has_bid_price_eight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_eight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bid_volume_eight = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {
          set_has_bid_volume_eight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_volume_eight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double ask_price_eight = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 465 & 0xFF */)) {
          set_has_ask_price_eight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_eight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ask_volume_eight = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 472 & 0xFF */)) {
          set_has_ask_volume_eight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_volume_eight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bid_price_nine = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 481 & 0xFF */)) {
          set_has_bid_price_nine();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_nine_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bid_volume_nine = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {
          set_has_bid_volume_nine();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_volume_nine_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double ask_price_nine = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 497 & 0xFF */)) {
          set_has_ask_price_nine();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_nine_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ask_volume_nine = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {
          set_has_ask_volume_nine();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_volume_nine_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bid_price_ten = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 513 & 0xFF */)) {
          set_has_bid_price_ten();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_ten_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 bid_volume_ten = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 520 & 0xFF */)) {
          set_has_bid_volume_ten();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_volume_ten_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double ask_price_ten = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 529 & 0xFF */)) {
          set_has_ask_price_ten();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_ten_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ask_volume_ten = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 536 & 0xFF */)) {
          set_has_ask_volume_ten();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_volume_ten_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simnow_logic.DepthMarket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simnow_logic.DepthMarket)
  return false;
#undef DO_
}

void DepthMarket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simnow_logic.DepthMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes trading_day = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->trading_day(), output);
  }

  // required bytes symbol = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->symbol(), output);
  }

  // required bytes exchange_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->exchange_id(), output);
  }

  // required bytes exchange_symbol = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->exchange_symbol(), output);
  }

  // required double last_price = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->last_price(), output);
  }

  // required double pre_settlement_price = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pre_settlement_price(), output);
  }

  // required double pre_close_price = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->pre_close_price(), output);
  }

  // required double pre_open_interest = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->pre_open_interest(), output);
  }

  // required double open_price = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->open_price(), output);
  }

  // required double highest_price = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->highest_price(), output);
  }

  // required double lowest_price = 11;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->lowest_price(), output);
  }

  // required double volume = 12;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->volume(), output);
  }

  // required double turnover = 13;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->turnover(), output);
  }

  // required double open_interest = 14;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->open_interest(), output);
  }

  // required double close_price = 15;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->close_price(), output);
  }

  // required double settlement_price = 16;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->settlement_price(), output);
  }

  // required double upper_limit_price = 17;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->upper_limit_price(), output);
  }

  // required double lower_limit_price = 18;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->lower_limit_price(), output);
  }

  // required double pre_delta = 19;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->pre_delta(), output);
  }

  // required double curr_delta = 20;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->curr_delta(), output);
  }

  // required bytes update_time = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->update_time(), output);
  }

  // required int32 update_millisec = 22;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->update_millisec(), output);
  }

  // required double average_price = 23;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->average_price(), output);
  }

  // required int64 current_time = 24;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->current_time(), output);
  }

  // required bytes action_day = 25;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      25, this->action_day(), output);
  }

  // required bytes instrument_name = 26;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      26, this->instrument_name(), output);
  }

  // required bytes product_id = 27;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      27, this->product_id(), output);
  }

  // required double bid_price_one = 28;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->bid_price_one(), output);
  }

  // required int32 bid_volume_one = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->bid_volume_one(), output);
  }

  // required double ask_price_one = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->ask_price_one(), output);
  }

  // required int32 ask_volume_one = 31;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->ask_volume_one(), output);
  }

  // required double bid_price_two = 32;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->bid_price_two(), output);
  }

  cached_has_bits = _has_bits_[1];
  // required int32 bid_volume_two = 33;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->bid_volume_two(), output);
  }

  // required double ask_price_two = 34;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->ask_price_two(), output);
  }

  // required int32 ask_volume_two = 35;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->ask_volume_two(), output);
  }

  // required double bid_price_three = 36;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->bid_price_three(), output);
  }

  // required int32 bid_volume_three = 37;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->bid_volume_three(), output);
  }

  // required double ask_price_three = 38;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->ask_price_three(), output);
  }

  // required int32 ask_volume_three = 39;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->ask_volume_three(), output);
  }

  // required double bid_price_four = 40;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->bid_price_four(), output);
  }

  // required int32 bid_volume_four = 41;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->bid_volume_four(), output);
  }

  // required double ask_price_four = 42;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->ask_price_four(), output);
  }

  // required int32 ask_volume_four = 43;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->ask_volume_four(), output);
  }

  // required double bid_price_five = 44;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(44, this->bid_price_five(), output);
  }

  // required int32 bid_volume_five = 45;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->bid_volume_five(), output);
  }

  // required double ask_price_five = 46;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(46, this->ask_price_five(), output);
  }

  // required int32 ask_volume_five = 47;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->ask_volume_five(), output);
  }

  // required double bid_price_six = 48;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(48, this->bid_price_six(), output);
  }

  // required int32 bid_volume_six = 49;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->bid_volume_six(), output);
  }

  // required double ask_price_six = 50;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->ask_price_six(), output);
  }

  // required int32 ask_volume_six = 51;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->ask_volume_six(), output);
  }

  // required double bid_price_seven = 52;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(52, this->bid_price_seven(), output);
  }

  // required int32 bid_volume_seven = 53;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->bid_volume_seven(), output);
  }

  // required double ask_price_seven = 54;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(54, this->ask_price_seven(), output);
  }

  // required int32 ask_volume_seven = 55;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->ask_volume_seven(), output);
  }

  // required double bid_price_eight = 56;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(56, this->bid_price_eight(), output);
  }

  // required int32 bid_volume_eight = 57;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->bid_volume_eight(), output);
  }

  // required double ask_price_eight = 58;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(58, this->ask_price_eight(), output);
  }

  // required int32 ask_volume_eight = 59;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->ask_volume_eight(), output);
  }

  // required double bid_price_nine = 60;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(60, this->bid_price_nine(), output);
  }

  // required int32 bid_volume_nine = 61;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->bid_volume_nine(), output);
  }

  // required double ask_price_nine = 62;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(62, this->ask_price_nine(), output);
  }

  // required int32 ask_volume_nine = 63;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->ask_volume_nine(), output);
  }

  // required double bid_price_ten = 64;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(64, this->bid_price_ten(), output);
  }

  cached_has_bits = _has_bits_[2];
  // required int32 bid_volume_ten = 65;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->bid_volume_ten(), output);
  }

  // required double ask_price_ten = 66;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(66, this->ask_price_ten(), output);
  }

  // required int32 ask_volume_ten = 67;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->ask_volume_ten(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simnow_logic.DepthMarket)
}

::google::protobuf::uint8* DepthMarket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:simnow_logic.DepthMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes trading_day = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->trading_day(), target);
  }

  // required bytes symbol = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->symbol(), target);
  }

  // required bytes exchange_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->exchange_id(), target);
  }

  // required bytes exchange_symbol = 4;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->exchange_symbol(), target);
  }

  // required double last_price = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->last_price(), target);
  }

  // required double pre_settlement_price = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pre_settlement_price(), target);
  }

  // required double pre_close_price = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->pre_close_price(), target);
  }

  // required double pre_open_interest = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->pre_open_interest(), target);
  }

  // required double open_price = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->open_price(), target);
  }

  // required double highest_price = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->highest_price(), target);
  }

  // required double lowest_price = 11;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->lowest_price(), target);
  }

  // required double volume = 12;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->volume(), target);
  }

  // required double turnover = 13;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->turnover(), target);
  }

  // required double open_interest = 14;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->open_interest(), target);
  }

  // required double close_price = 15;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->close_price(), target);
  }

  // required double settlement_price = 16;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->settlement_price(), target);
  }

  // required double upper_limit_price = 17;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->upper_limit_price(), target);
  }

  // required double lower_limit_price = 18;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->lower_limit_price(), target);
  }

  // required double pre_delta = 19;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->pre_delta(), target);
  }

  // required double curr_delta = 20;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->curr_delta(), target);
  }

  // required bytes update_time = 21;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->update_time(), target);
  }

  // required int32 update_millisec = 22;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->update_millisec(), target);
  }

  // required double average_price = 23;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->average_price(), target);
  }

  // required int64 current_time = 24;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->current_time(), target);
  }

  // required bytes action_day = 25;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->action_day(), target);
  }

  // required bytes instrument_name = 26;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->instrument_name(), target);
  }

  // required bytes product_id = 27;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        27, this->product_id(), target);
  }

  // required double bid_price_one = 28;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->bid_price_one(), target);
  }

  // required int32 bid_volume_one = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->bid_volume_one(), target);
  }

  // required double ask_price_one = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->ask_price_one(), target);
  }

  // required int32 ask_volume_one = 31;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->ask_volume_one(), target);
  }

  // required double bid_price_two = 32;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->bid_price_two(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required int32 bid_volume_two = 33;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->bid_volume_two(), target);
  }

  // required double ask_price_two = 34;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->ask_price_two(), target);
  }

  // required int32 ask_volume_two = 35;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->ask_volume_two(), target);
  }

  // required double bid_price_three = 36;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->bid_price_three(), target);
  }

  // required int32 bid_volume_three = 37;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->bid_volume_three(), target);
  }

  // required double ask_price_three = 38;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->ask_price_three(), target);
  }

  // required int32 ask_volume_three = 39;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->ask_volume_three(), target);
  }

  // required double bid_price_four = 40;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->bid_price_four(), target);
  }

  // required int32 bid_volume_four = 41;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->bid_volume_four(), target);
  }

  // required double ask_price_four = 42;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->ask_price_four(), target);
  }

  // required int32 ask_volume_four = 43;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->ask_volume_four(), target);
  }

  // required double bid_price_five = 44;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(44, this->bid_price_five(), target);
  }

  // required int32 bid_volume_five = 45;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->bid_volume_five(), target);
  }

  // required double ask_price_five = 46;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(46, this->ask_price_five(), target);
  }

  // required int32 ask_volume_five = 47;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->ask_volume_five(), target);
  }

  // required double bid_price_six = 48;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(48, this->bid_price_six(), target);
  }

  // required int32 bid_volume_six = 49;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->bid_volume_six(), target);
  }

  // required double ask_price_six = 50;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->ask_price_six(), target);
  }

  // required int32 ask_volume_six = 51;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->ask_volume_six(), target);
  }

  // required double bid_price_seven = 52;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(52, this->bid_price_seven(), target);
  }

  // required int32 bid_volume_seven = 53;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->bid_volume_seven(), target);
  }

  // required double ask_price_seven = 54;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(54, this->ask_price_seven(), target);
  }

  // required int32 ask_volume_seven = 55;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->ask_volume_seven(), target);
  }

  // required double bid_price_eight = 56;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(56, this->bid_price_eight(), target);
  }

  // required int32 bid_volume_eight = 57;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->bid_volume_eight(), target);
  }

  // required double ask_price_eight = 58;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(58, this->ask_price_eight(), target);
  }

  // required int32 ask_volume_eight = 59;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->ask_volume_eight(), target);
  }

  // required double bid_price_nine = 60;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(60, this->bid_price_nine(), target);
  }

  // required int32 bid_volume_nine = 61;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->bid_volume_nine(), target);
  }

  // required double ask_price_nine = 62;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(62, this->ask_price_nine(), target);
  }

  // required int32 ask_volume_nine = 63;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->ask_volume_nine(), target);
  }

  // required double bid_price_ten = 64;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(64, this->bid_price_ten(), target);
  }

  cached_has_bits = _has_bits_[2];
  // required int32 bid_volume_ten = 65;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->bid_volume_ten(), target);
  }

  // required double ask_price_ten = 66;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(66, this->ask_price_ten(), target);
  }

  // required int32 ask_volume_ten = 67;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->ask_volume_ten(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simnow_logic.DepthMarket)
  return target;
}

size_t DepthMarket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:simnow_logic.DepthMarket)
  size_t total_size = 0;

  if (has_trading_day()) {
    // required bytes trading_day = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trading_day());
  }

  if (has_symbol()) {
    // required bytes symbol = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->symbol());
  }

  if (has_exchange_id()) {
    // required bytes exchange_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_id());
  }

  if (has_exchange_symbol()) {
    // required bytes exchange_symbol = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_symbol());
  }

  if (has_update_time()) {
    // required bytes update_time = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->update_time());
  }

  if (has_action_day()) {
    // required bytes action_day = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->action_day());
  }

  if (has_instrument_name()) {
    // required bytes instrument_name = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->instrument_name());
  }

  if (has_product_id()) {
    // required bytes product_id = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->product_id());
  }

  if (has_last_price()) {
    // required double last_price = 5;
    total_size += 1 + 8;
  }

  if (has_pre_settlement_price()) {
    // required double pre_settlement_price = 6;
    total_size += 1 + 8;
  }

  if (has_pre_close_price()) {
    // required double pre_close_price = 7;
    total_size += 1 + 8;
  }

  if (has_pre_open_interest()) {
    // required double pre_open_interest = 8;
    total_size += 1 + 8;
  }

  if (has_open_price()) {
    // required double open_price = 9;
    total_size += 1 + 8;
  }

  if (has_highest_price()) {
    // required double highest_price = 10;
    total_size += 1 + 8;
  }

  if (has_lowest_price()) {
    // required double lowest_price = 11;
    total_size += 1 + 8;
  }

  if (has_volume()) {
    // required double volume = 12;
    total_size += 1 + 8;
  }

  if (has_turnover()) {
    // required double turnover = 13;
    total_size += 1 + 8;
  }

  if (has_open_interest()) {
    // required double open_interest = 14;
    total_size += 1 + 8;
  }

  if (has_close_price()) {
    // required double close_price = 15;
    total_size += 1 + 8;
  }

  if (has_settlement_price()) {
    // required double settlement_price = 16;
    total_size += 2 + 8;
  }

  if (has_upper_limit_price()) {
    // required double upper_limit_price = 17;
    total_size += 2 + 8;
  }

  if (has_lower_limit_price()) {
    // required double lower_limit_price = 18;
    total_size += 2 + 8;
  }

  if (has_pre_delta()) {
    // required double pre_delta = 19;
    total_size += 2 + 8;
  }

  if (has_curr_delta()) {
    // required double curr_delta = 20;
    total_size += 2 + 8;
  }

  if (has_average_price()) {
    // required double average_price = 23;
    total_size += 2 + 8;
  }

  if (has_current_time()) {
    // required int64 current_time = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current_time());
  }

  if (has_update_millisec()) {
    // required int32 update_millisec = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->update_millisec());
  }

  if (has_bid_volume_one()) {
    // required int32 bid_volume_one = 29;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_one());
  }

  if (has_bid_price_one()) {
    // required double bid_price_one = 28;
    total_size += 2 + 8;
  }

  if (has_ask_price_one()) {
    // required double ask_price_one = 30;
    total_size += 2 + 8;
  }

  if (has_bid_price_two()) {
    // required double bid_price_two = 32;
    total_size += 2 + 8;
  }

  if (has_ask_volume_one()) {
    // required int32 ask_volume_one = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_one());
  }

  if (has_bid_volume_two()) {
    // required int32 bid_volume_two = 33;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_two());
  }

  if (has_ask_price_two()) {
    // required double ask_price_two = 34;
    total_size += 2 + 8;
  }

  if (has_bid_price_three()) {
    // required double bid_price_three = 36;
    total_size += 2 + 8;
  }

  if (has_ask_volume_two()) {
    // required int32 ask_volume_two = 35;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_two());
  }

  if (has_bid_volume_three()) {
    // required int32 bid_volume_three = 37;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_three());
  }

  if (has_ask_price_three()) {
    // required double ask_price_three = 38;
    total_size += 2 + 8;
  }

  if (has_bid_price_four()) {
    // required double bid_price_four = 40;
    total_size += 2 + 8;
  }

  if (has_ask_volume_three()) {
    // required int32 ask_volume_three = 39;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_three());
  }

  if (has_bid_volume_four()) {
    // required int32 bid_volume_four = 41;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_four());
  }

  if (has_ask_price_four()) {
    // required double ask_price_four = 42;
    total_size += 2 + 8;
  }

  if (has_bid_price_five()) {
    // required double bid_price_five = 44;
    total_size += 2 + 8;
  }

  if (has_ask_volume_four()) {
    // required int32 ask_volume_four = 43;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_four());
  }

  if (has_bid_volume_five()) {
    // required int32 bid_volume_five = 45;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_five());
  }

  if (has_ask_price_five()) {
    // required double ask_price_five = 46;
    total_size += 2 + 8;
  }

  if (has_bid_price_six()) {
    // required double bid_price_six = 48;
    total_size += 2 + 8;
  }

  if (has_ask_volume_five()) {
    // required int32 ask_volume_five = 47;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_five());
  }

  if (has_bid_volume_six()) {
    // required int32 bid_volume_six = 49;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_six());
  }

  if (has_ask_price_six()) {
    // required double ask_price_six = 50;
    total_size += 2 + 8;
  }

  if (has_bid_price_seven()) {
    // required double bid_price_seven = 52;
    total_size += 2 + 8;
  }

  if (has_ask_volume_six()) {
    // required int32 ask_volume_six = 51;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_six());
  }

  if (has_bid_volume_seven()) {
    // required int32 bid_volume_seven = 53;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_seven());
  }

  if (has_ask_price_seven()) {
    // required double ask_price_seven = 54;
    total_size += 2 + 8;
  }

  if (has_bid_price_eight()) {
    // required double bid_price_eight = 56;
    total_size += 2 + 8;
  }

  if (has_ask_volume_seven()) {
    // required int32 ask_volume_seven = 55;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_seven());
  }

  if (has_bid_volume_eight()) {
    // required int32 bid_volume_eight = 57;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_eight());
  }

  if (has_ask_price_eight()) {
    // required double ask_price_eight = 58;
    total_size += 2 + 8;
  }

  if (has_bid_price_nine()) {
    // required double bid_price_nine = 60;
    total_size += 2 + 8;
  }

  if (has_ask_volume_eight()) {
    // required int32 ask_volume_eight = 59;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_eight());
  }

  if (has_bid_volume_nine()) {
    // required int32 bid_volume_nine = 61;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_nine());
  }

  if (has_ask_price_nine()) {
    // required double ask_price_nine = 62;
    total_size += 2 + 8;
  }

  if (has_bid_price_ten()) {
    // required double bid_price_ten = 64;
    total_size += 2 + 8;
  }

  if (has_ask_volume_nine()) {
    // required int32 ask_volume_nine = 63;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_nine());
  }

  if (has_bid_volume_ten()) {
    // required int32 bid_volume_ten = 65;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_ten());
  }

  if (has_ask_price_ten()) {
    // required double ask_price_ten = 66;
    total_size += 2 + 8;
  }

  if (has_ask_volume_ten()) {
    // required int32 ask_volume_ten = 67;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_ten());
  }

  return total_size;
}
size_t DepthMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simnow_logic.DepthMarket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if ((((_has_bits_[0] & 0xffffffff) ^ 0xffffffff)
         | ((_has_bits_[1] & 0xffffffff) ^ 0xffffffff)
         | ((_has_bits_[2] & 0x00000007) ^ 0x00000007)) == 0) {  // All required fields are present.
    // required bytes trading_day = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trading_day());

    // required bytes symbol = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->symbol());

    // required bytes exchange_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_id());

    // required bytes exchange_symbol = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exchange_symbol());

    // required bytes update_time = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->update_time());

    // required bytes action_day = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->action_day());

    // required bytes instrument_name = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->instrument_name());

    // required bytes product_id = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->product_id());

    // required double last_price = 5;
    total_size += 1 + 8;

    // required double pre_settlement_price = 6;
    total_size += 1 + 8;

    // required double pre_close_price = 7;
    total_size += 1 + 8;

    // required double pre_open_interest = 8;
    total_size += 1 + 8;

    // required double open_price = 9;
    total_size += 1 + 8;

    // required double highest_price = 10;
    total_size += 1 + 8;

    // required double lowest_price = 11;
    total_size += 1 + 8;

    // required double volume = 12;
    total_size += 1 + 8;

    // required double turnover = 13;
    total_size += 1 + 8;

    // required double open_interest = 14;
    total_size += 1 + 8;

    // required double close_price = 15;
    total_size += 1 + 8;

    // required double settlement_price = 16;
    total_size += 2 + 8;

    // required double upper_limit_price = 17;
    total_size += 2 + 8;

    // required double lower_limit_price = 18;
    total_size += 2 + 8;

    // required double pre_delta = 19;
    total_size += 2 + 8;

    // required double curr_delta = 20;
    total_size += 2 + 8;

    // required double average_price = 23;
    total_size += 2 + 8;

    // required int64 current_time = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current_time());

    // required int32 update_millisec = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->update_millisec());

    // required int32 bid_volume_one = 29;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_one());

    // required double bid_price_one = 28;
    total_size += 2 + 8;

    // required double ask_price_one = 30;
    total_size += 2 + 8;

    // required double bid_price_two = 32;
    total_size += 2 + 8;

    // required int32 ask_volume_one = 31;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_one());

    // required int32 bid_volume_two = 33;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_two());

    // required double ask_price_two = 34;
    total_size += 2 + 8;

    // required double bid_price_three = 36;
    total_size += 2 + 8;

    // required int32 ask_volume_two = 35;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_two());

    // required int32 bid_volume_three = 37;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_three());

    // required double ask_price_three = 38;
    total_size += 2 + 8;

    // required double bid_price_four = 40;
    total_size += 2 + 8;

    // required int32 ask_volume_three = 39;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_three());

    // required int32 bid_volume_four = 41;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_four());

    // required double ask_price_four = 42;
    total_size += 2 + 8;

    // required double bid_price_five = 44;
    total_size += 2 + 8;

    // required int32 ask_volume_four = 43;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_four());

    // required int32 bid_volume_five = 45;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_five());

    // required double ask_price_five = 46;
    total_size += 2 + 8;

    // required double bid_price_six = 48;
    total_size += 2 + 8;

    // required int32 ask_volume_five = 47;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_five());

    // required int32 bid_volume_six = 49;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_six());

    // required double ask_price_six = 50;
    total_size += 2 + 8;

    // required double bid_price_seven = 52;
    total_size += 2 + 8;

    // required int32 ask_volume_six = 51;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_six());

    // required int32 bid_volume_seven = 53;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_seven());

    // required double ask_price_seven = 54;
    total_size += 2 + 8;

    // required double bid_price_eight = 56;
    total_size += 2 + 8;

    // required int32 ask_volume_seven = 55;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_seven());

    // required int32 bid_volume_eight = 57;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_eight());

    // required double ask_price_eight = 58;
    total_size += 2 + 8;

    // required double bid_price_nine = 60;
    total_size += 2 + 8;

    // required int32 ask_volume_eight = 59;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_eight());

    // required int32 bid_volume_nine = 61;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_nine());

    // required double ask_price_nine = 62;
    total_size += 2 + 8;

    // required double bid_price_ten = 64;
    total_size += 2 + 8;

    // required int32 ask_volume_nine = 63;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_nine());

    // required int32 bid_volume_ten = 65;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bid_volume_ten());

    // required double ask_price_ten = 66;
    total_size += 2 + 8;

    // required int32 ask_volume_ten = 67;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ask_volume_ten());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepthMarket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simnow_logic.DepthMarket)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthMarket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DepthMarket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simnow_logic.DepthMarket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simnow_logic.DepthMarket)
    MergeFrom(*source);
  }
}

void DepthMarket::MergeFrom(const DepthMarket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simnow_logic.DepthMarket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_trading_day();
      trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_exchange_id();
      exchange_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_exchange_symbol();
      exchange_symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_symbol_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_update_time();
      update_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_time_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_action_day();
      action_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_day_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_instrument_name();
      instrument_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrument_name_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_product_id();
      product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      last_price_ = from.last_price_;
    }
    if (cached_has_bits & 0x00000200u) {
      pre_settlement_price_ = from.pre_settlement_price_;
    }
    if (cached_has_bits & 0x00000400u) {
      pre_close_price_ = from.pre_close_price_;
    }
    if (cached_has_bits & 0x00000800u) {
      pre_open_interest_ = from.pre_open_interest_;
    }
    if (cached_has_bits & 0x00001000u) {
      open_price_ = from.open_price_;
    }
    if (cached_has_bits & 0x00002000u) {
      highest_price_ = from.highest_price_;
    }
    if (cached_has_bits & 0x00004000u) {
      lowest_price_ = from.lowest_price_;
    }
    if (cached_has_bits & 0x00008000u) {
      volume_ = from.volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      turnover_ = from.turnover_;
    }
    if (cached_has_bits & 0x00020000u) {
      open_interest_ = from.open_interest_;
    }
    if (cached_has_bits & 0x00040000u) {
      close_price_ = from.close_price_;
    }
    if (cached_has_bits & 0x00080000u) {
      settlement_price_ = from.settlement_price_;
    }
    if (cached_has_bits & 0x00100000u) {
      upper_limit_price_ = from.upper_limit_price_;
    }
    if (cached_has_bits & 0x00200000u) {
      lower_limit_price_ = from.lower_limit_price_;
    }
    if (cached_has_bits & 0x00400000u) {
      pre_delta_ = from.pre_delta_;
    }
    if (cached_has_bits & 0x00800000u) {
      curr_delta_ = from.curr_delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      average_price_ = from.average_price_;
    }
    if (cached_has_bits & 0x02000000u) {
      current_time_ = from.current_time_;
    }
    if (cached_has_bits & 0x04000000u) {
      update_millisec_ = from.update_millisec_;
    }
    if (cached_has_bits & 0x08000000u) {
      bid_volume_one_ = from.bid_volume_one_;
    }
    if (cached_has_bits & 0x10000000u) {
      bid_price_one_ = from.bid_price_one_;
    }
    if (cached_has_bits & 0x20000000u) {
      ask_price_one_ = from.ask_price_one_;
    }
    if (cached_has_bits & 0x40000000u) {
      bid_price_two_ = from.bid_price_two_;
    }
    if (cached_has_bits & 0x80000000u) {
      ask_volume_one_ = from.ask_volume_one_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      bid_volume_two_ = from.bid_volume_two_;
    }
    if (cached_has_bits & 0x00000002u) {
      ask_price_two_ = from.ask_price_two_;
    }
    if (cached_has_bits & 0x00000004u) {
      bid_price_three_ = from.bid_price_three_;
    }
    if (cached_has_bits & 0x00000008u) {
      ask_volume_two_ = from.ask_volume_two_;
    }
    if (cached_has_bits & 0x00000010u) {
      bid_volume_three_ = from.bid_volume_three_;
    }
    if (cached_has_bits & 0x00000020u) {
      ask_price_three_ = from.ask_price_three_;
    }
    if (cached_has_bits & 0x00000040u) {
      bid_price_four_ = from.bid_price_four_;
    }
    if (cached_has_bits & 0x00000080u) {
      ask_volume_three_ = from.ask_volume_three_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      bid_volume_four_ = from.bid_volume_four_;
    }
    if (cached_has_bits & 0x00000200u) {
      ask_price_four_ = from.ask_price_four_;
    }
    if (cached_has_bits & 0x00000400u) {
      bid_price_five_ = from.bid_price_five_;
    }
    if (cached_has_bits & 0x00000800u) {
      ask_volume_four_ = from.ask_volume_four_;
    }
    if (cached_has_bits & 0x00001000u) {
      bid_volume_five_ = from.bid_volume_five_;
    }
    if (cached_has_bits & 0x00002000u) {
      ask_price_five_ = from.ask_price_five_;
    }
    if (cached_has_bits & 0x00004000u) {
      bid_price_six_ = from.bid_price_six_;
    }
    if (cached_has_bits & 0x00008000u) {
      ask_volume_five_ = from.ask_volume_five_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      bid_volume_six_ = from.bid_volume_six_;
    }
    if (cached_has_bits & 0x00020000u) {
      ask_price_six_ = from.ask_price_six_;
    }
    if (cached_has_bits & 0x00040000u) {
      bid_price_seven_ = from.bid_price_seven_;
    }
    if (cached_has_bits & 0x00080000u) {
      ask_volume_six_ = from.ask_volume_six_;
    }
    if (cached_has_bits & 0x00100000u) {
      bid_volume_seven_ = from.bid_volume_seven_;
    }
    if (cached_has_bits & 0x00200000u) {
      ask_price_seven_ = from.ask_price_seven_;
    }
    if (cached_has_bits & 0x00400000u) {
      bid_price_eight_ = from.bid_price_eight_;
    }
    if (cached_has_bits & 0x00800000u) {
      ask_volume_seven_ = from.ask_volume_seven_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      bid_volume_eight_ = from.bid_volume_eight_;
    }
    if (cached_has_bits & 0x02000000u) {
      ask_price_eight_ = from.ask_price_eight_;
    }
    if (cached_has_bits & 0x04000000u) {
      bid_price_nine_ = from.bid_price_nine_;
    }
    if (cached_has_bits & 0x08000000u) {
      ask_volume_eight_ = from.ask_volume_eight_;
    }
    if (cached_has_bits & 0x10000000u) {
      bid_volume_nine_ = from.bid_volume_nine_;
    }
    if (cached_has_bits & 0x20000000u) {
      ask_price_nine_ = from.ask_price_nine_;
    }
    if (cached_has_bits & 0x40000000u) {
      bid_price_ten_ = from.bid_price_ten_;
    }
    if (cached_has_bits & 0x80000000u) {
      ask_volume_nine_ = from.ask_volume_nine_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      bid_volume_ten_ = from.bid_volume_ten_;
    }
    if (cached_has_bits & 0x00000002u) {
      ask_price_ten_ = from.ask_price_ten_;
    }
    if (cached_has_bits & 0x00000004u) {
      ask_volume_ten_ = from.ask_volume_ten_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void DepthMarket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simnow_logic.DepthMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthMarket::CopyFrom(const DepthMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simnow_logic.DepthMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthMarket::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[2] & 0x00000007) != 0x00000007) return false;
  return true;
}

void DepthMarket::Swap(DepthMarket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepthMarket::InternalSwap(DepthMarket* other) {
  using std::swap;
  trading_day_.Swap(&other->trading_day_);
  symbol_.Swap(&other->symbol_);
  exchange_id_.Swap(&other->exchange_id_);
  exchange_symbol_.Swap(&other->exchange_symbol_);
  update_time_.Swap(&other->update_time_);
  action_day_.Swap(&other->action_day_);
  instrument_name_.Swap(&other->instrument_name_);
  product_id_.Swap(&other->product_id_);
  swap(last_price_, other->last_price_);
  swap(pre_settlement_price_, other->pre_settlement_price_);
  swap(pre_close_price_, other->pre_close_price_);
  swap(pre_open_interest_, other->pre_open_interest_);
  swap(open_price_, other->open_price_);
  swap(highest_price_, other->highest_price_);
  swap(lowest_price_, other->lowest_price_);
  swap(volume_, other->volume_);
  swap(turnover_, other->turnover_);
  swap(open_interest_, other->open_interest_);
  swap(close_price_, other->close_price_);
  swap(settlement_price_, other->settlement_price_);
  swap(upper_limit_price_, other->upper_limit_price_);
  swap(lower_limit_price_, other->lower_limit_price_);
  swap(pre_delta_, other->pre_delta_);
  swap(curr_delta_, other->curr_delta_);
  swap(average_price_, other->average_price_);
  swap(current_time_, other->current_time_);
  swap(update_millisec_, other->update_millisec_);
  swap(bid_volume_one_, other->bid_volume_one_);
  swap(bid_price_one_, other->bid_price_one_);
  swap(ask_price_one_, other->ask_price_one_);
  swap(bid_price_two_, other->bid_price_two_);
  swap(ask_volume_one_, other->ask_volume_one_);
  swap(bid_volume_two_, other->bid_volume_two_);
  swap(ask_price_two_, other->ask_price_two_);
  swap(bid_price_three_, other->bid_price_three_);
  swap(ask_volume_two_, other->ask_volume_two_);
  swap(bid_volume_three_, other->bid_volume_three_);
  swap(ask_price_three_, other->ask_price_three_);
  swap(bid_price_four_, other->bid_price_four_);
  swap(ask_volume_three_, other->ask_volume_three_);
  swap(bid_volume_four_, other->bid_volume_four_);
  swap(ask_price_four_, other->ask_price_four_);
  swap(bid_price_five_, other->bid_price_five_);
  swap(ask_volume_four_, other->ask_volume_four_);
  swap(bid_volume_five_, other->bid_volume_five_);
  swap(ask_price_five_, other->ask_price_five_);
  swap(bid_price_six_, other->bid_price_six_);
  swap(ask_volume_five_, other->ask_volume_five_);
  swap(bid_volume_six_, other->bid_volume_six_);
  swap(ask_price_six_, other->ask_price_six_);
  swap(bid_price_seven_, other->bid_price_seven_);
  swap(ask_volume_six_, other->ask_volume_six_);
  swap(bid_volume_seven_, other->bid_volume_seven_);
  swap(ask_price_seven_, other->ask_price_seven_);
  swap(bid_price_eight_, other->bid_price_eight_);
  swap(ask_volume_seven_, other->ask_volume_seven_);
  swap(bid_volume_eight_, other->bid_volume_eight_);
  swap(ask_price_eight_, other->ask_price_eight_);
  swap(bid_price_nine_, other->bid_price_nine_);
  swap(ask_volume_eight_, other->ask_volume_eight_);
  swap(bid_volume_nine_, other->bid_volume_nine_);
  swap(ask_price_nine_, other->ask_price_nine_);
  swap(bid_price_ten_, other->bid_price_ten_);
  swap(ask_volume_nine_, other->ask_volume_nine_);
  swap(bid_volume_ten_, other->bid_volume_ten_);
  swap(ask_price_ten_, other->ask_price_ten_);
  swap(ask_volume_ten_, other->ask_volume_ten_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DepthMarket::GetMetadata() const {
  protobuf_depth_5fmarket_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_depth_5fmarket_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DepthMarket

// required bytes trading_day = 1;
bool DepthMarket::has_trading_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DepthMarket::set_has_trading_day() {
  _has_bits_[0] |= 0x00000001u;
}
void DepthMarket::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000001u;
}
void DepthMarket::clear_trading_day() {
  trading_day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trading_day();
}
const ::std::string& DepthMarket::trading_day() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.trading_day)
  return trading_day_.GetNoArena();
}
void DepthMarket::set_trading_day(const ::std::string& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.trading_day)
}
#if LANG_CXX11
void DepthMarket::set_trading_day(::std::string&& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.trading_day)
}
#endif
void DepthMarket::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.trading_day)
}
void DepthMarket::set_trading_day(const void* value, size_t size) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.trading_day)
}
::std::string* DepthMarket::mutable_trading_day() {
  set_has_trading_day();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.trading_day)
  return trading_day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DepthMarket::release_trading_day() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.trading_day)
  clear_has_trading_day();
  return trading_day_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DepthMarket::set_allocated_trading_day(::std::string* trading_day) {
  if (trading_day != NULL) {
    set_has_trading_day();
  } else {
    clear_has_trading_day();
  }
  trading_day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trading_day);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.trading_day)
}

// required bytes symbol = 2;
bool DepthMarket::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DepthMarket::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
void DepthMarket::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
void DepthMarket::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
const ::std::string& DepthMarket::symbol() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.symbol)
  return symbol_.GetNoArena();
}
void DepthMarket::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.symbol)
}
#if LANG_CXX11
void DepthMarket::set_symbol(::std::string&& value) {
  set_has_symbol();
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.symbol)
}
#endif
void DepthMarket::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.symbol)
}
void DepthMarket::set_symbol(const void* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.symbol)
}
::std::string* DepthMarket::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DepthMarket::release_symbol() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DepthMarket::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.symbol)
}

// required bytes exchange_id = 3;
bool DepthMarket::has_exchange_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DepthMarket::set_has_exchange_id() {
  _has_bits_[0] |= 0x00000004u;
}
void DepthMarket::clear_has_exchange_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void DepthMarket::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange_id();
}
const ::std::string& DepthMarket::exchange_id() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.exchange_id)
  return exchange_id_.GetNoArena();
}
void DepthMarket::set_exchange_id(const ::std::string& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.exchange_id)
}
#if LANG_CXX11
void DepthMarket::set_exchange_id(::std::string&& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.exchange_id)
}
#endif
void DepthMarket::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.exchange_id)
}
void DepthMarket::set_exchange_id(const void* value, size_t size) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.exchange_id)
}
::std::string* DepthMarket::mutable_exchange_id() {
  set_has_exchange_id();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DepthMarket::release_exchange_id() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.exchange_id)
  clear_has_exchange_id();
  return exchange_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DepthMarket::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    set_has_exchange_id();
  } else {
    clear_has_exchange_id();
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.exchange_id)
}

// required bytes exchange_symbol = 4;
bool DepthMarket::has_exchange_symbol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DepthMarket::set_has_exchange_symbol() {
  _has_bits_[0] |= 0x00000008u;
}
void DepthMarket::clear_has_exchange_symbol() {
  _has_bits_[0] &= ~0x00000008u;
}
void DepthMarket::clear_exchange_symbol() {
  exchange_symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange_symbol();
}
const ::std::string& DepthMarket::exchange_symbol() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.exchange_symbol)
  return exchange_symbol_.GetNoArena();
}
void DepthMarket::set_exchange_symbol(const ::std::string& value) {
  set_has_exchange_symbol();
  exchange_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.exchange_symbol)
}
#if LANG_CXX11
void DepthMarket::set_exchange_symbol(::std::string&& value) {
  set_has_exchange_symbol();
  exchange_symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.exchange_symbol)
}
#endif
void DepthMarket::set_exchange_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_symbol();
  exchange_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.exchange_symbol)
}
void DepthMarket::set_exchange_symbol(const void* value, size_t size) {
  set_has_exchange_symbol();
  exchange_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.exchange_symbol)
}
::std::string* DepthMarket::mutable_exchange_symbol() {
  set_has_exchange_symbol();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.exchange_symbol)
  return exchange_symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DepthMarket::release_exchange_symbol() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.exchange_symbol)
  clear_has_exchange_symbol();
  return exchange_symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DepthMarket::set_allocated_exchange_symbol(::std::string* exchange_symbol) {
  if (exchange_symbol != NULL) {
    set_has_exchange_symbol();
  } else {
    clear_has_exchange_symbol();
  }
  exchange_symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_symbol);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.exchange_symbol)
}

// required double last_price = 5;
bool DepthMarket::has_last_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DepthMarket::set_has_last_price() {
  _has_bits_[0] |= 0x00000100u;
}
void DepthMarket::clear_has_last_price() {
  _has_bits_[0] &= ~0x00000100u;
}
void DepthMarket::clear_last_price() {
  last_price_ = 0;
  clear_has_last_price();
}
double DepthMarket::last_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.last_price)
  return last_price_;
}
void DepthMarket::set_last_price(double value) {
  set_has_last_price();
  last_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.last_price)
}

// required double pre_settlement_price = 6;
bool DepthMarket::has_pre_settlement_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DepthMarket::set_has_pre_settlement_price() {
  _has_bits_[0] |= 0x00000200u;
}
void DepthMarket::clear_has_pre_settlement_price() {
  _has_bits_[0] &= ~0x00000200u;
}
void DepthMarket::clear_pre_settlement_price() {
  pre_settlement_price_ = 0;
  clear_has_pre_settlement_price();
}
double DepthMarket::pre_settlement_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.pre_settlement_price)
  return pre_settlement_price_;
}
void DepthMarket::set_pre_settlement_price(double value) {
  set_has_pre_settlement_price();
  pre_settlement_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.pre_settlement_price)
}

// required double pre_close_price = 7;
bool DepthMarket::has_pre_close_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DepthMarket::set_has_pre_close_price() {
  _has_bits_[0] |= 0x00000400u;
}
void DepthMarket::clear_has_pre_close_price() {
  _has_bits_[0] &= ~0x00000400u;
}
void DepthMarket::clear_pre_close_price() {
  pre_close_price_ = 0;
  clear_has_pre_close_price();
}
double DepthMarket::pre_close_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.pre_close_price)
  return pre_close_price_;
}
void DepthMarket::set_pre_close_price(double value) {
  set_has_pre_close_price();
  pre_close_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.pre_close_price)
}

// required double pre_open_interest = 8;
bool DepthMarket::has_pre_open_interest() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DepthMarket::set_has_pre_open_interest() {
  _has_bits_[0] |= 0x00000800u;
}
void DepthMarket::clear_has_pre_open_interest() {
  _has_bits_[0] &= ~0x00000800u;
}
void DepthMarket::clear_pre_open_interest() {
  pre_open_interest_ = 0;
  clear_has_pre_open_interest();
}
double DepthMarket::pre_open_interest() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.pre_open_interest)
  return pre_open_interest_;
}
void DepthMarket::set_pre_open_interest(double value) {
  set_has_pre_open_interest();
  pre_open_interest_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.pre_open_interest)
}

// required double open_price = 9;
bool DepthMarket::has_open_price() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DepthMarket::set_has_open_price() {
  _has_bits_[0] |= 0x00001000u;
}
void DepthMarket::clear_has_open_price() {
  _has_bits_[0] &= ~0x00001000u;
}
void DepthMarket::clear_open_price() {
  open_price_ = 0;
  clear_has_open_price();
}
double DepthMarket::open_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.open_price)
  return open_price_;
}
void DepthMarket::set_open_price(double value) {
  set_has_open_price();
  open_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.open_price)
}

// required double highest_price = 10;
bool DepthMarket::has_highest_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DepthMarket::set_has_highest_price() {
  _has_bits_[0] |= 0x00002000u;
}
void DepthMarket::clear_has_highest_price() {
  _has_bits_[0] &= ~0x00002000u;
}
void DepthMarket::clear_highest_price() {
  highest_price_ = 0;
  clear_has_highest_price();
}
double DepthMarket::highest_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.highest_price)
  return highest_price_;
}
void DepthMarket::set_highest_price(double value) {
  set_has_highest_price();
  highest_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.highest_price)
}

// required double lowest_price = 11;
bool DepthMarket::has_lowest_price() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DepthMarket::set_has_lowest_price() {
  _has_bits_[0] |= 0x00004000u;
}
void DepthMarket::clear_has_lowest_price() {
  _has_bits_[0] &= ~0x00004000u;
}
void DepthMarket::clear_lowest_price() {
  lowest_price_ = 0;
  clear_has_lowest_price();
}
double DepthMarket::lowest_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.lowest_price)
  return lowest_price_;
}
void DepthMarket::set_lowest_price(double value) {
  set_has_lowest_price();
  lowest_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.lowest_price)
}

// required double volume = 12;
bool DepthMarket::has_volume() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DepthMarket::set_has_volume() {
  _has_bits_[0] |= 0x00008000u;
}
void DepthMarket::clear_has_volume() {
  _has_bits_[0] &= ~0x00008000u;
}
void DepthMarket::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
double DepthMarket::volume() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.volume)
  return volume_;
}
void DepthMarket::set_volume(double value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.volume)
}

// required double turnover = 13;
bool DepthMarket::has_turnover() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DepthMarket::set_has_turnover() {
  _has_bits_[0] |= 0x00010000u;
}
void DepthMarket::clear_has_turnover() {
  _has_bits_[0] &= ~0x00010000u;
}
void DepthMarket::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
double DepthMarket::turnover() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.turnover)
  return turnover_;
}
void DepthMarket::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.turnover)
}

// required double open_interest = 14;
bool DepthMarket::has_open_interest() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DepthMarket::set_has_open_interest() {
  _has_bits_[0] |= 0x00020000u;
}
void DepthMarket::clear_has_open_interest() {
  _has_bits_[0] &= ~0x00020000u;
}
void DepthMarket::clear_open_interest() {
  open_interest_ = 0;
  clear_has_open_interest();
}
double DepthMarket::open_interest() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.open_interest)
  return open_interest_;
}
void DepthMarket::set_open_interest(double value) {
  set_has_open_interest();
  open_interest_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.open_interest)
}

// required double close_price = 15;
bool DepthMarket::has_close_price() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DepthMarket::set_has_close_price() {
  _has_bits_[0] |= 0x00040000u;
}
void DepthMarket::clear_has_close_price() {
  _has_bits_[0] &= ~0x00040000u;
}
void DepthMarket::clear_close_price() {
  close_price_ = 0;
  clear_has_close_price();
}
double DepthMarket::close_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.close_price)
  return close_price_;
}
void DepthMarket::set_close_price(double value) {
  set_has_close_price();
  close_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.close_price)
}

// required double settlement_price = 16;
bool DepthMarket::has_settlement_price() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void DepthMarket::set_has_settlement_price() {
  _has_bits_[0] |= 0x00080000u;
}
void DepthMarket::clear_has_settlement_price() {
  _has_bits_[0] &= ~0x00080000u;
}
void DepthMarket::clear_settlement_price() {
  settlement_price_ = 0;
  clear_has_settlement_price();
}
double DepthMarket::settlement_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.settlement_price)
  return settlement_price_;
}
void DepthMarket::set_settlement_price(double value) {
  set_has_settlement_price();
  settlement_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.settlement_price)
}

// required double upper_limit_price = 17;
bool DepthMarket::has_upper_limit_price() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void DepthMarket::set_has_upper_limit_price() {
  _has_bits_[0] |= 0x00100000u;
}
void DepthMarket::clear_has_upper_limit_price() {
  _has_bits_[0] &= ~0x00100000u;
}
void DepthMarket::clear_upper_limit_price() {
  upper_limit_price_ = 0;
  clear_has_upper_limit_price();
}
double DepthMarket::upper_limit_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.upper_limit_price)
  return upper_limit_price_;
}
void DepthMarket::set_upper_limit_price(double value) {
  set_has_upper_limit_price();
  upper_limit_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.upper_limit_price)
}

// required double lower_limit_price = 18;
bool DepthMarket::has_lower_limit_price() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void DepthMarket::set_has_lower_limit_price() {
  _has_bits_[0] |= 0x00200000u;
}
void DepthMarket::clear_has_lower_limit_price() {
  _has_bits_[0] &= ~0x00200000u;
}
void DepthMarket::clear_lower_limit_price() {
  lower_limit_price_ = 0;
  clear_has_lower_limit_price();
}
double DepthMarket::lower_limit_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.lower_limit_price)
  return lower_limit_price_;
}
void DepthMarket::set_lower_limit_price(double value) {
  set_has_lower_limit_price();
  lower_limit_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.lower_limit_price)
}

// required double pre_delta = 19;
bool DepthMarket::has_pre_delta() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void DepthMarket::set_has_pre_delta() {
  _has_bits_[0] |= 0x00400000u;
}
void DepthMarket::clear_has_pre_delta() {
  _has_bits_[0] &= ~0x00400000u;
}
void DepthMarket::clear_pre_delta() {
  pre_delta_ = 0;
  clear_has_pre_delta();
}
double DepthMarket::pre_delta() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.pre_delta)
  return pre_delta_;
}
void DepthMarket::set_pre_delta(double value) {
  set_has_pre_delta();
  pre_delta_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.pre_delta)
}

// required double curr_delta = 20;
bool DepthMarket::has_curr_delta() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void DepthMarket::set_has_curr_delta() {
  _has_bits_[0] |= 0x00800000u;
}
void DepthMarket::clear_has_curr_delta() {
  _has_bits_[0] &= ~0x00800000u;
}
void DepthMarket::clear_curr_delta() {
  curr_delta_ = 0;
  clear_has_curr_delta();
}
double DepthMarket::curr_delta() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.curr_delta)
  return curr_delta_;
}
void DepthMarket::set_curr_delta(double value) {
  set_has_curr_delta();
  curr_delta_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.curr_delta)
}

// required bytes update_time = 21;
bool DepthMarket::has_update_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DepthMarket::set_has_update_time() {
  _has_bits_[0] |= 0x00000010u;
}
void DepthMarket::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void DepthMarket::clear_update_time() {
  update_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_update_time();
}
const ::std::string& DepthMarket::update_time() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.update_time)
  return update_time_.GetNoArena();
}
void DepthMarket::set_update_time(const ::std::string& value) {
  set_has_update_time();
  update_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.update_time)
}
#if LANG_CXX11
void DepthMarket::set_update_time(::std::string&& value) {
  set_has_update_time();
  update_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.update_time)
}
#endif
void DepthMarket::set_update_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_update_time();
  update_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.update_time)
}
void DepthMarket::set_update_time(const void* value, size_t size) {
  set_has_update_time();
  update_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.update_time)
}
::std::string* DepthMarket::mutable_update_time() {
  set_has_update_time();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.update_time)
  return update_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DepthMarket::release_update_time() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.update_time)
  clear_has_update_time();
  return update_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DepthMarket::set_allocated_update_time(::std::string* update_time) {
  if (update_time != NULL) {
    set_has_update_time();
  } else {
    clear_has_update_time();
  }
  update_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_time);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.update_time)
}

// required int32 update_millisec = 22;
bool DepthMarket::has_update_millisec() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void DepthMarket::set_has_update_millisec() {
  _has_bits_[0] |= 0x04000000u;
}
void DepthMarket::clear_has_update_millisec() {
  _has_bits_[0] &= ~0x04000000u;
}
void DepthMarket::clear_update_millisec() {
  update_millisec_ = 0;
  clear_has_update_millisec();
}
::google::protobuf::int32 DepthMarket::update_millisec() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.update_millisec)
  return update_millisec_;
}
void DepthMarket::set_update_millisec(::google::protobuf::int32 value) {
  set_has_update_millisec();
  update_millisec_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.update_millisec)
}

// required double average_price = 23;
bool DepthMarket::has_average_price() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void DepthMarket::set_has_average_price() {
  _has_bits_[0] |= 0x01000000u;
}
void DepthMarket::clear_has_average_price() {
  _has_bits_[0] &= ~0x01000000u;
}
void DepthMarket::clear_average_price() {
  average_price_ = 0;
  clear_has_average_price();
}
double DepthMarket::average_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.average_price)
  return average_price_;
}
void DepthMarket::set_average_price(double value) {
  set_has_average_price();
  average_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.average_price)
}

// required int64 current_time = 24;
bool DepthMarket::has_current_time() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void DepthMarket::set_has_current_time() {
  _has_bits_[0] |= 0x02000000u;
}
void DepthMarket::clear_has_current_time() {
  _has_bits_[0] &= ~0x02000000u;
}
void DepthMarket::clear_current_time() {
  current_time_ = GOOGLE_LONGLONG(0);
  clear_has_current_time();
}
::google::protobuf::int64 DepthMarket::current_time() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.current_time)
  return current_time_;
}
void DepthMarket::set_current_time(::google::protobuf::int64 value) {
  set_has_current_time();
  current_time_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.current_time)
}

// required bytes action_day = 25;
bool DepthMarket::has_action_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DepthMarket::set_has_action_day() {
  _has_bits_[0] |= 0x00000020u;
}
void DepthMarket::clear_has_action_day() {
  _has_bits_[0] &= ~0x00000020u;
}
void DepthMarket::clear_action_day() {
  action_day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_action_day();
}
const ::std::string& DepthMarket::action_day() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.action_day)
  return action_day_.GetNoArena();
}
void DepthMarket::set_action_day(const ::std::string& value) {
  set_has_action_day();
  action_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.action_day)
}
#if LANG_CXX11
void DepthMarket::set_action_day(::std::string&& value) {
  set_has_action_day();
  action_day_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.action_day)
}
#endif
void DepthMarket::set_action_day(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_action_day();
  action_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.action_day)
}
void DepthMarket::set_action_day(const void* value, size_t size) {
  set_has_action_day();
  action_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.action_day)
}
::std::string* DepthMarket::mutable_action_day() {
  set_has_action_day();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.action_day)
  return action_day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DepthMarket::release_action_day() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.action_day)
  clear_has_action_day();
  return action_day_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DepthMarket::set_allocated_action_day(::std::string* action_day) {
  if (action_day != NULL) {
    set_has_action_day();
  } else {
    clear_has_action_day();
  }
  action_day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_day);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.action_day)
}

// required bytes instrument_name = 26;
bool DepthMarket::has_instrument_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DepthMarket::set_has_instrument_name() {
  _has_bits_[0] |= 0x00000040u;
}
void DepthMarket::clear_has_instrument_name() {
  _has_bits_[0] &= ~0x00000040u;
}
void DepthMarket::clear_instrument_name() {
  instrument_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrument_name();
}
const ::std::string& DepthMarket::instrument_name() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.instrument_name)
  return instrument_name_.GetNoArena();
}
void DepthMarket::set_instrument_name(const ::std::string& value) {
  set_has_instrument_name();
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.instrument_name)
}
#if LANG_CXX11
void DepthMarket::set_instrument_name(::std::string&& value) {
  set_has_instrument_name();
  instrument_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.instrument_name)
}
#endif
void DepthMarket::set_instrument_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_instrument_name();
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.instrument_name)
}
void DepthMarket::set_instrument_name(const void* value, size_t size) {
  set_has_instrument_name();
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.instrument_name)
}
::std::string* DepthMarket::mutable_instrument_name() {
  set_has_instrument_name();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.instrument_name)
  return instrument_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DepthMarket::release_instrument_name() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.instrument_name)
  clear_has_instrument_name();
  return instrument_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DepthMarket::set_allocated_instrument_name(::std::string* instrument_name) {
  if (instrument_name != NULL) {
    set_has_instrument_name();
  } else {
    clear_has_instrument_name();
  }
  instrument_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_name);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.instrument_name)
}

// required bytes product_id = 27;
bool DepthMarket::has_product_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DepthMarket::set_has_product_id() {
  _has_bits_[0] |= 0x00000080u;
}
void DepthMarket::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void DepthMarket::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product_id();
}
const ::std::string& DepthMarket::product_id() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.product_id)
  return product_id_.GetNoArena();
}
void DepthMarket::set_product_id(const ::std::string& value) {
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.product_id)
}
#if LANG_CXX11
void DepthMarket::set_product_id(::std::string&& value) {
  set_has_product_id();
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.product_id)
}
#endif
void DepthMarket::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.product_id)
}
void DepthMarket::set_product_id(const void* value, size_t size) {
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.product_id)
}
::std::string* DepthMarket::mutable_product_id() {
  set_has_product_id();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DepthMarket::release_product_id() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.product_id)
  clear_has_product_id();
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DepthMarket::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    set_has_product_id();
  } else {
    clear_has_product_id();
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.product_id)
}

// required double bid_price_one = 28;
bool DepthMarket::has_bid_price_one() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void DepthMarket::set_has_bid_price_one() {
  _has_bits_[0] |= 0x10000000u;
}
void DepthMarket::clear_has_bid_price_one() {
  _has_bits_[0] &= ~0x10000000u;
}
void DepthMarket::clear_bid_price_one() {
  bid_price_one_ = 0;
  clear_has_bid_price_one();
}
double DepthMarket::bid_price_one() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_one)
  return bid_price_one_;
}
void DepthMarket::set_bid_price_one(double value) {
  set_has_bid_price_one();
  bid_price_one_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_one)
}

// required int32 bid_volume_one = 29;
bool DepthMarket::has_bid_volume_one() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void DepthMarket::set_has_bid_volume_one() {
  _has_bits_[0] |= 0x08000000u;
}
void DepthMarket::clear_has_bid_volume_one() {
  _has_bits_[0] &= ~0x08000000u;
}
void DepthMarket::clear_bid_volume_one() {
  bid_volume_one_ = 0;
  clear_has_bid_volume_one();
}
::google::protobuf::int32 DepthMarket::bid_volume_one() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_one)
  return bid_volume_one_;
}
void DepthMarket::set_bid_volume_one(::google::protobuf::int32 value) {
  set_has_bid_volume_one();
  bid_volume_one_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_one)
}

// required double ask_price_one = 30;
bool DepthMarket::has_ask_price_one() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void DepthMarket::set_has_ask_price_one() {
  _has_bits_[0] |= 0x20000000u;
}
void DepthMarket::clear_has_ask_price_one() {
  _has_bits_[0] &= ~0x20000000u;
}
void DepthMarket::clear_ask_price_one() {
  ask_price_one_ = 0;
  clear_has_ask_price_one();
}
double DepthMarket::ask_price_one() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_one)
  return ask_price_one_;
}
void DepthMarket::set_ask_price_one(double value) {
  set_has_ask_price_one();
  ask_price_one_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_one)
}

// required int32 ask_volume_one = 31;
bool DepthMarket::has_ask_volume_one() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void DepthMarket::set_has_ask_volume_one() {
  _has_bits_[0] |= 0x80000000u;
}
void DepthMarket::clear_has_ask_volume_one() {
  _has_bits_[0] &= ~0x80000000u;
}
void DepthMarket::clear_ask_volume_one() {
  ask_volume_one_ = 0;
  clear_has_ask_volume_one();
}
::google::protobuf::int32 DepthMarket::ask_volume_one() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_one)
  return ask_volume_one_;
}
void DepthMarket::set_ask_volume_one(::google::protobuf::int32 value) {
  set_has_ask_volume_one();
  ask_volume_one_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_one)
}

// required double bid_price_two = 32;
bool DepthMarket::has_bid_price_two() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void DepthMarket::set_has_bid_price_two() {
  _has_bits_[0] |= 0x40000000u;
}
void DepthMarket::clear_has_bid_price_two() {
  _has_bits_[0] &= ~0x40000000u;
}
void DepthMarket::clear_bid_price_two() {
  bid_price_two_ = 0;
  clear_has_bid_price_two();
}
double DepthMarket::bid_price_two() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_two)
  return bid_price_two_;
}
void DepthMarket::set_bid_price_two(double value) {
  set_has_bid_price_two();
  bid_price_two_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_two)
}

// required int32 bid_volume_two = 33;
bool DepthMarket::has_bid_volume_two() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void DepthMarket::set_has_bid_volume_two() {
  _has_bits_[1] |= 0x00000001u;
}
void DepthMarket::clear_has_bid_volume_two() {
  _has_bits_[1] &= ~0x00000001u;
}
void DepthMarket::clear_bid_volume_two() {
  bid_volume_two_ = 0;
  clear_has_bid_volume_two();
}
::google::protobuf::int32 DepthMarket::bid_volume_two() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_two)
  return bid_volume_two_;
}
void DepthMarket::set_bid_volume_two(::google::protobuf::int32 value) {
  set_has_bid_volume_two();
  bid_volume_two_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_two)
}

// required double ask_price_two = 34;
bool DepthMarket::has_ask_price_two() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void DepthMarket::set_has_ask_price_two() {
  _has_bits_[1] |= 0x00000002u;
}
void DepthMarket::clear_has_ask_price_two() {
  _has_bits_[1] &= ~0x00000002u;
}
void DepthMarket::clear_ask_price_two() {
  ask_price_two_ = 0;
  clear_has_ask_price_two();
}
double DepthMarket::ask_price_two() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_two)
  return ask_price_two_;
}
void DepthMarket::set_ask_price_two(double value) {
  set_has_ask_price_two();
  ask_price_two_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_two)
}

// required int32 ask_volume_two = 35;
bool DepthMarket::has_ask_volume_two() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void DepthMarket::set_has_ask_volume_two() {
  _has_bits_[1] |= 0x00000008u;
}
void DepthMarket::clear_has_ask_volume_two() {
  _has_bits_[1] &= ~0x00000008u;
}
void DepthMarket::clear_ask_volume_two() {
  ask_volume_two_ = 0;
  clear_has_ask_volume_two();
}
::google::protobuf::int32 DepthMarket::ask_volume_two() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_two)
  return ask_volume_two_;
}
void DepthMarket::set_ask_volume_two(::google::protobuf::int32 value) {
  set_has_ask_volume_two();
  ask_volume_two_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_two)
}

// required double bid_price_three = 36;
bool DepthMarket::has_bid_price_three() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void DepthMarket::set_has_bid_price_three() {
  _has_bits_[1] |= 0x00000004u;
}
void DepthMarket::clear_has_bid_price_three() {
  _has_bits_[1] &= ~0x00000004u;
}
void DepthMarket::clear_bid_price_three() {
  bid_price_three_ = 0;
  clear_has_bid_price_three();
}
double DepthMarket::bid_price_three() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_three)
  return bid_price_three_;
}
void DepthMarket::set_bid_price_three(double value) {
  set_has_bid_price_three();
  bid_price_three_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_three)
}

// required int32 bid_volume_three = 37;
bool DepthMarket::has_bid_volume_three() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void DepthMarket::set_has_bid_volume_three() {
  _has_bits_[1] |= 0x00000010u;
}
void DepthMarket::clear_has_bid_volume_three() {
  _has_bits_[1] &= ~0x00000010u;
}
void DepthMarket::clear_bid_volume_three() {
  bid_volume_three_ = 0;
  clear_has_bid_volume_three();
}
::google::protobuf::int32 DepthMarket::bid_volume_three() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_three)
  return bid_volume_three_;
}
void DepthMarket::set_bid_volume_three(::google::protobuf::int32 value) {
  set_has_bid_volume_three();
  bid_volume_three_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_three)
}

// required double ask_price_three = 38;
bool DepthMarket::has_ask_price_three() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void DepthMarket::set_has_ask_price_three() {
  _has_bits_[1] |= 0x00000020u;
}
void DepthMarket::clear_has_ask_price_three() {
  _has_bits_[1] &= ~0x00000020u;
}
void DepthMarket::clear_ask_price_three() {
  ask_price_three_ = 0;
  clear_has_ask_price_three();
}
double DepthMarket::ask_price_three() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_three)
  return ask_price_three_;
}
void DepthMarket::set_ask_price_three(double value) {
  set_has_ask_price_three();
  ask_price_three_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_three)
}

// required int32 ask_volume_three = 39;
bool DepthMarket::has_ask_volume_three() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void DepthMarket::set_has_ask_volume_three() {
  _has_bits_[1] |= 0x00000080u;
}
void DepthMarket::clear_has_ask_volume_three() {
  _has_bits_[1] &= ~0x00000080u;
}
void DepthMarket::clear_ask_volume_three() {
  ask_volume_three_ = 0;
  clear_has_ask_volume_three();
}
::google::protobuf::int32 DepthMarket::ask_volume_three() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_three)
  return ask_volume_three_;
}
void DepthMarket::set_ask_volume_three(::google::protobuf::int32 value) {
  set_has_ask_volume_three();
  ask_volume_three_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_three)
}

// required double bid_price_four = 40;
bool DepthMarket::has_bid_price_four() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void DepthMarket::set_has_bid_price_four() {
  _has_bits_[1] |= 0x00000040u;
}
void DepthMarket::clear_has_bid_price_four() {
  _has_bits_[1] &= ~0x00000040u;
}
void DepthMarket::clear_bid_price_four() {
  bid_price_four_ = 0;
  clear_has_bid_price_four();
}
double DepthMarket::bid_price_four() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_four)
  return bid_price_four_;
}
void DepthMarket::set_bid_price_four(double value) {
  set_has_bid_price_four();
  bid_price_four_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_four)
}

// required int32 bid_volume_four = 41;
bool DepthMarket::has_bid_volume_four() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void DepthMarket::set_has_bid_volume_four() {
  _has_bits_[1] |= 0x00000100u;
}
void DepthMarket::clear_has_bid_volume_four() {
  _has_bits_[1] &= ~0x00000100u;
}
void DepthMarket::clear_bid_volume_four() {
  bid_volume_four_ = 0;
  clear_has_bid_volume_four();
}
::google::protobuf::int32 DepthMarket::bid_volume_four() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_four)
  return bid_volume_four_;
}
void DepthMarket::set_bid_volume_four(::google::protobuf::int32 value) {
  set_has_bid_volume_four();
  bid_volume_four_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_four)
}

// required double ask_price_four = 42;
bool DepthMarket::has_ask_price_four() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void DepthMarket::set_has_ask_price_four() {
  _has_bits_[1] |= 0x00000200u;
}
void DepthMarket::clear_has_ask_price_four() {
  _has_bits_[1] &= ~0x00000200u;
}
void DepthMarket::clear_ask_price_four() {
  ask_price_four_ = 0;
  clear_has_ask_price_four();
}
double DepthMarket::ask_price_four() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_four)
  return ask_price_four_;
}
void DepthMarket::set_ask_price_four(double value) {
  set_has_ask_price_four();
  ask_price_four_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_four)
}

// required int32 ask_volume_four = 43;
bool DepthMarket::has_ask_volume_four() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void DepthMarket::set_has_ask_volume_four() {
  _has_bits_[1] |= 0x00000800u;
}
void DepthMarket::clear_has_ask_volume_four() {
  _has_bits_[1] &= ~0x00000800u;
}
void DepthMarket::clear_ask_volume_four() {
  ask_volume_four_ = 0;
  clear_has_ask_volume_four();
}
::google::protobuf::int32 DepthMarket::ask_volume_four() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_four)
  return ask_volume_four_;
}
void DepthMarket::set_ask_volume_four(::google::protobuf::int32 value) {
  set_has_ask_volume_four();
  ask_volume_four_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_four)
}

// required double bid_price_five = 44;
bool DepthMarket::has_bid_price_five() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void DepthMarket::set_has_bid_price_five() {
  _has_bits_[1] |= 0x00000400u;
}
void DepthMarket::clear_has_bid_price_five() {
  _has_bits_[1] &= ~0x00000400u;
}
void DepthMarket::clear_bid_price_five() {
  bid_price_five_ = 0;
  clear_has_bid_price_five();
}
double DepthMarket::bid_price_five() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_five)
  return bid_price_five_;
}
void DepthMarket::set_bid_price_five(double value) {
  set_has_bid_price_five();
  bid_price_five_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_five)
}

// required int32 bid_volume_five = 45;
bool DepthMarket::has_bid_volume_five() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void DepthMarket::set_has_bid_volume_five() {
  _has_bits_[1] |= 0x00001000u;
}
void DepthMarket::clear_has_bid_volume_five() {
  _has_bits_[1] &= ~0x00001000u;
}
void DepthMarket::clear_bid_volume_five() {
  bid_volume_five_ = 0;
  clear_has_bid_volume_five();
}
::google::protobuf::int32 DepthMarket::bid_volume_five() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_five)
  return bid_volume_five_;
}
void DepthMarket::set_bid_volume_five(::google::protobuf::int32 value) {
  set_has_bid_volume_five();
  bid_volume_five_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_five)
}

// required double ask_price_five = 46;
bool DepthMarket::has_ask_price_five() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void DepthMarket::set_has_ask_price_five() {
  _has_bits_[1] |= 0x00002000u;
}
void DepthMarket::clear_has_ask_price_five() {
  _has_bits_[1] &= ~0x00002000u;
}
void DepthMarket::clear_ask_price_five() {
  ask_price_five_ = 0;
  clear_has_ask_price_five();
}
double DepthMarket::ask_price_five() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_five)
  return ask_price_five_;
}
void DepthMarket::set_ask_price_five(double value) {
  set_has_ask_price_five();
  ask_price_five_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_five)
}

// required int32 ask_volume_five = 47;
bool DepthMarket::has_ask_volume_five() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void DepthMarket::set_has_ask_volume_five() {
  _has_bits_[1] |= 0x00008000u;
}
void DepthMarket::clear_has_ask_volume_five() {
  _has_bits_[1] &= ~0x00008000u;
}
void DepthMarket::clear_ask_volume_five() {
  ask_volume_five_ = 0;
  clear_has_ask_volume_five();
}
::google::protobuf::int32 DepthMarket::ask_volume_five() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_five)
  return ask_volume_five_;
}
void DepthMarket::set_ask_volume_five(::google::protobuf::int32 value) {
  set_has_ask_volume_five();
  ask_volume_five_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_five)
}

// required double bid_price_six = 48;
bool DepthMarket::has_bid_price_six() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void DepthMarket::set_has_bid_price_six() {
  _has_bits_[1] |= 0x00004000u;
}
void DepthMarket::clear_has_bid_price_six() {
  _has_bits_[1] &= ~0x00004000u;
}
void DepthMarket::clear_bid_price_six() {
  bid_price_six_ = 0;
  clear_has_bid_price_six();
}
double DepthMarket::bid_price_six() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_six)
  return bid_price_six_;
}
void DepthMarket::set_bid_price_six(double value) {
  set_has_bid_price_six();
  bid_price_six_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_six)
}

// required int32 bid_volume_six = 49;
bool DepthMarket::has_bid_volume_six() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void DepthMarket::set_has_bid_volume_six() {
  _has_bits_[1] |= 0x00010000u;
}
void DepthMarket::clear_has_bid_volume_six() {
  _has_bits_[1] &= ~0x00010000u;
}
void DepthMarket::clear_bid_volume_six() {
  bid_volume_six_ = 0;
  clear_has_bid_volume_six();
}
::google::protobuf::int32 DepthMarket::bid_volume_six() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_six)
  return bid_volume_six_;
}
void DepthMarket::set_bid_volume_six(::google::protobuf::int32 value) {
  set_has_bid_volume_six();
  bid_volume_six_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_six)
}

// required double ask_price_six = 50;
bool DepthMarket::has_ask_price_six() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void DepthMarket::set_has_ask_price_six() {
  _has_bits_[1] |= 0x00020000u;
}
void DepthMarket::clear_has_ask_price_six() {
  _has_bits_[1] &= ~0x00020000u;
}
void DepthMarket::clear_ask_price_six() {
  ask_price_six_ = 0;
  clear_has_ask_price_six();
}
double DepthMarket::ask_price_six() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_six)
  return ask_price_six_;
}
void DepthMarket::set_ask_price_six(double value) {
  set_has_ask_price_six();
  ask_price_six_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_six)
}

// required int32 ask_volume_six = 51;
bool DepthMarket::has_ask_volume_six() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void DepthMarket::set_has_ask_volume_six() {
  _has_bits_[1] |= 0x00080000u;
}
void DepthMarket::clear_has_ask_volume_six() {
  _has_bits_[1] &= ~0x00080000u;
}
void DepthMarket::clear_ask_volume_six() {
  ask_volume_six_ = 0;
  clear_has_ask_volume_six();
}
::google::protobuf::int32 DepthMarket::ask_volume_six() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_six)
  return ask_volume_six_;
}
void DepthMarket::set_ask_volume_six(::google::protobuf::int32 value) {
  set_has_ask_volume_six();
  ask_volume_six_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_six)
}

// required double bid_price_seven = 52;
bool DepthMarket::has_bid_price_seven() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void DepthMarket::set_has_bid_price_seven() {
  _has_bits_[1] |= 0x00040000u;
}
void DepthMarket::clear_has_bid_price_seven() {
  _has_bits_[1] &= ~0x00040000u;
}
void DepthMarket::clear_bid_price_seven() {
  bid_price_seven_ = 0;
  clear_has_bid_price_seven();
}
double DepthMarket::bid_price_seven() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_seven)
  return bid_price_seven_;
}
void DepthMarket::set_bid_price_seven(double value) {
  set_has_bid_price_seven();
  bid_price_seven_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_seven)
}

// required int32 bid_volume_seven = 53;
bool DepthMarket::has_bid_volume_seven() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void DepthMarket::set_has_bid_volume_seven() {
  _has_bits_[1] |= 0x00100000u;
}
void DepthMarket::clear_has_bid_volume_seven() {
  _has_bits_[1] &= ~0x00100000u;
}
void DepthMarket::clear_bid_volume_seven() {
  bid_volume_seven_ = 0;
  clear_has_bid_volume_seven();
}
::google::protobuf::int32 DepthMarket::bid_volume_seven() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_seven)
  return bid_volume_seven_;
}
void DepthMarket::set_bid_volume_seven(::google::protobuf::int32 value) {
  set_has_bid_volume_seven();
  bid_volume_seven_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_seven)
}

// required double ask_price_seven = 54;
bool DepthMarket::has_ask_price_seven() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void DepthMarket::set_has_ask_price_seven() {
  _has_bits_[1] |= 0x00200000u;
}
void DepthMarket::clear_has_ask_price_seven() {
  _has_bits_[1] &= ~0x00200000u;
}
void DepthMarket::clear_ask_price_seven() {
  ask_price_seven_ = 0;
  clear_has_ask_price_seven();
}
double DepthMarket::ask_price_seven() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_seven)
  return ask_price_seven_;
}
void DepthMarket::set_ask_price_seven(double value) {
  set_has_ask_price_seven();
  ask_price_seven_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_seven)
}

// required int32 ask_volume_seven = 55;
bool DepthMarket::has_ask_volume_seven() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void DepthMarket::set_has_ask_volume_seven() {
  _has_bits_[1] |= 0x00800000u;
}
void DepthMarket::clear_has_ask_volume_seven() {
  _has_bits_[1] &= ~0x00800000u;
}
void DepthMarket::clear_ask_volume_seven() {
  ask_volume_seven_ = 0;
  clear_has_ask_volume_seven();
}
::google::protobuf::int32 DepthMarket::ask_volume_seven() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_seven)
  return ask_volume_seven_;
}
void DepthMarket::set_ask_volume_seven(::google::protobuf::int32 value) {
  set_has_ask_volume_seven();
  ask_volume_seven_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_seven)
}

// required double bid_price_eight = 56;
bool DepthMarket::has_bid_price_eight() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void DepthMarket::set_has_bid_price_eight() {
  _has_bits_[1] |= 0x00400000u;
}
void DepthMarket::clear_has_bid_price_eight() {
  _has_bits_[1] &= ~0x00400000u;
}
void DepthMarket::clear_bid_price_eight() {
  bid_price_eight_ = 0;
  clear_has_bid_price_eight();
}
double DepthMarket::bid_price_eight() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_eight)
  return bid_price_eight_;
}
void DepthMarket::set_bid_price_eight(double value) {
  set_has_bid_price_eight();
  bid_price_eight_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_eight)
}

// required int32 bid_volume_eight = 57;
bool DepthMarket::has_bid_volume_eight() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void DepthMarket::set_has_bid_volume_eight() {
  _has_bits_[1] |= 0x01000000u;
}
void DepthMarket::clear_has_bid_volume_eight() {
  _has_bits_[1] &= ~0x01000000u;
}
void DepthMarket::clear_bid_volume_eight() {
  bid_volume_eight_ = 0;
  clear_has_bid_volume_eight();
}
::google::protobuf::int32 DepthMarket::bid_volume_eight() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_eight)
  return bid_volume_eight_;
}
void DepthMarket::set_bid_volume_eight(::google::protobuf::int32 value) {
  set_has_bid_volume_eight();
  bid_volume_eight_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_eight)
}

// required double ask_price_eight = 58;
bool DepthMarket::has_ask_price_eight() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void DepthMarket::set_has_ask_price_eight() {
  _has_bits_[1] |= 0x02000000u;
}
void DepthMarket::clear_has_ask_price_eight() {
  _has_bits_[1] &= ~0x02000000u;
}
void DepthMarket::clear_ask_price_eight() {
  ask_price_eight_ = 0;
  clear_has_ask_price_eight();
}
double DepthMarket::ask_price_eight() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_eight)
  return ask_price_eight_;
}
void DepthMarket::set_ask_price_eight(double value) {
  set_has_ask_price_eight();
  ask_price_eight_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_eight)
}

// required int32 ask_volume_eight = 59;
bool DepthMarket::has_ask_volume_eight() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void DepthMarket::set_has_ask_volume_eight() {
  _has_bits_[1] |= 0x08000000u;
}
void DepthMarket::clear_has_ask_volume_eight() {
  _has_bits_[1] &= ~0x08000000u;
}
void DepthMarket::clear_ask_volume_eight() {
  ask_volume_eight_ = 0;
  clear_has_ask_volume_eight();
}
::google::protobuf::int32 DepthMarket::ask_volume_eight() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_eight)
  return ask_volume_eight_;
}
void DepthMarket::set_ask_volume_eight(::google::protobuf::int32 value) {
  set_has_ask_volume_eight();
  ask_volume_eight_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_eight)
}

// required double bid_price_nine = 60;
bool DepthMarket::has_bid_price_nine() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void DepthMarket::set_has_bid_price_nine() {
  _has_bits_[1] |= 0x04000000u;
}
void DepthMarket::clear_has_bid_price_nine() {
  _has_bits_[1] &= ~0x04000000u;
}
void DepthMarket::clear_bid_price_nine() {
  bid_price_nine_ = 0;
  clear_has_bid_price_nine();
}
double DepthMarket::bid_price_nine() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_nine)
  return bid_price_nine_;
}
void DepthMarket::set_bid_price_nine(double value) {
  set_has_bid_price_nine();
  bid_price_nine_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_nine)
}

// required int32 bid_volume_nine = 61;
bool DepthMarket::has_bid_volume_nine() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
void DepthMarket::set_has_bid_volume_nine() {
  _has_bits_[1] |= 0x10000000u;
}
void DepthMarket::clear_has_bid_volume_nine() {
  _has_bits_[1] &= ~0x10000000u;
}
void DepthMarket::clear_bid_volume_nine() {
  bid_volume_nine_ = 0;
  clear_has_bid_volume_nine();
}
::google::protobuf::int32 DepthMarket::bid_volume_nine() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_nine)
  return bid_volume_nine_;
}
void DepthMarket::set_bid_volume_nine(::google::protobuf::int32 value) {
  set_has_bid_volume_nine();
  bid_volume_nine_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_nine)
}

// required double ask_price_nine = 62;
bool DepthMarket::has_ask_price_nine() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
void DepthMarket::set_has_ask_price_nine() {
  _has_bits_[1] |= 0x20000000u;
}
void DepthMarket::clear_has_ask_price_nine() {
  _has_bits_[1] &= ~0x20000000u;
}
void DepthMarket::clear_ask_price_nine() {
  ask_price_nine_ = 0;
  clear_has_ask_price_nine();
}
double DepthMarket::ask_price_nine() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_nine)
  return ask_price_nine_;
}
void DepthMarket::set_ask_price_nine(double value) {
  set_has_ask_price_nine();
  ask_price_nine_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_nine)
}

// required int32 ask_volume_nine = 63;
bool DepthMarket::has_ask_volume_nine() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
void DepthMarket::set_has_ask_volume_nine() {
  _has_bits_[1] |= 0x80000000u;
}
void DepthMarket::clear_has_ask_volume_nine() {
  _has_bits_[1] &= ~0x80000000u;
}
void DepthMarket::clear_ask_volume_nine() {
  ask_volume_nine_ = 0;
  clear_has_ask_volume_nine();
}
::google::protobuf::int32 DepthMarket::ask_volume_nine() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_nine)
  return ask_volume_nine_;
}
void DepthMarket::set_ask_volume_nine(::google::protobuf::int32 value) {
  set_has_ask_volume_nine();
  ask_volume_nine_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_nine)
}

// required double bid_price_ten = 64;
bool DepthMarket::has_bid_price_ten() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
void DepthMarket::set_has_bid_price_ten() {
  _has_bits_[1] |= 0x40000000u;
}
void DepthMarket::clear_has_bid_price_ten() {
  _has_bits_[1] &= ~0x40000000u;
}
void DepthMarket::clear_bid_price_ten() {
  bid_price_ten_ = 0;
  clear_has_bid_price_ten();
}
double DepthMarket::bid_price_ten() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_ten)
  return bid_price_ten_;
}
void DepthMarket::set_bid_price_ten(double value) {
  set_has_bid_price_ten();
  bid_price_ten_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_ten)
}

// required int32 bid_volume_ten = 65;
bool DepthMarket::has_bid_volume_ten() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
void DepthMarket::set_has_bid_volume_ten() {
  _has_bits_[2] |= 0x00000001u;
}
void DepthMarket::clear_has_bid_volume_ten() {
  _has_bits_[2] &= ~0x00000001u;
}
void DepthMarket::clear_bid_volume_ten() {
  bid_volume_ten_ = 0;
  clear_has_bid_volume_ten();
}
::google::protobuf::int32 DepthMarket::bid_volume_ten() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_ten)
  return bid_volume_ten_;
}
void DepthMarket::set_bid_volume_ten(::google::protobuf::int32 value) {
  set_has_bid_volume_ten();
  bid_volume_ten_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_ten)
}

// required double ask_price_ten = 66;
bool DepthMarket::has_ask_price_ten() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
void DepthMarket::set_has_ask_price_ten() {
  _has_bits_[2] |= 0x00000002u;
}
void DepthMarket::clear_has_ask_price_ten() {
  _has_bits_[2] &= ~0x00000002u;
}
void DepthMarket::clear_ask_price_ten() {
  ask_price_ten_ = 0;
  clear_has_ask_price_ten();
}
double DepthMarket::ask_price_ten() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_ten)
  return ask_price_ten_;
}
void DepthMarket::set_ask_price_ten(double value) {
  set_has_ask_price_ten();
  ask_price_ten_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_ten)
}

// required int32 ask_volume_ten = 67;
bool DepthMarket::has_ask_volume_ten() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
void DepthMarket::set_has_ask_volume_ten() {
  _has_bits_[2] |= 0x00000004u;
}
void DepthMarket::clear_has_ask_volume_ten() {
  _has_bits_[2] &= ~0x00000004u;
}
void DepthMarket::clear_ask_volume_ten() {
  ask_volume_ten_ = 0;
  clear_has_ask_volume_ten();
}
::google::protobuf::int32 DepthMarket::ask_volume_ten() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_ten)
  return ask_volume_ten_;
}
void DepthMarket::set_ask_volume_ten(::google::protobuf::int32 value) {
  set_has_ask_volume_ten();
  ask_volume_ten_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_ten)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace simnow_logic

// @@protoc_insertion_point(global_scope)
