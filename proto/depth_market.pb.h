// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: depth_market.proto

#ifndef PROTOBUF_depth_5fmarket_2eproto__INCLUDED
#define PROTOBUF_depth_5fmarket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace simnow_logic {
class DepthMarket;
class DepthMarketDefaultTypeInternal;
extern DepthMarketDefaultTypeInternal _DepthMarket_default_instance_;
}  // namespace simnow_logic

namespace simnow_logic {

namespace protobuf_depth_5fmarket_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_depth_5fmarket_2eproto

// ===================================================================

class DepthMarket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simnow_logic.DepthMarket) */ {
 public:
  DepthMarket();
  virtual ~DepthMarket();

  DepthMarket(const DepthMarket& from);

  inline DepthMarket& operator=(const DepthMarket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DepthMarket(DepthMarket&& from) noexcept
    : DepthMarket() {
    *this = ::std::move(from);
  }

  inline DepthMarket& operator=(DepthMarket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DepthMarket& default_instance();

  static inline const DepthMarket* internal_default_instance() {
    return reinterpret_cast<const DepthMarket*>(
               &_DepthMarket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DepthMarket* other);
  friend void swap(DepthMarket& a, DepthMarket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DepthMarket* New() const PROTOBUF_FINAL { return New(NULL); }

  DepthMarket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DepthMarket& from);
  void MergeFrom(const DepthMarket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DepthMarket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes trading_day = 1;
  bool has_trading_day() const;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 1;
  const ::std::string& trading_day() const;
  void set_trading_day(const ::std::string& value);
  #if LANG_CXX11
  void set_trading_day(::std::string&& value);
  #endif
  void set_trading_day(const char* value);
  void set_trading_day(const void* value, size_t size);
  ::std::string* mutable_trading_day();
  ::std::string* release_trading_day();
  void set_allocated_trading_day(::std::string* trading_day);

  // required bytes symbol = 2;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const void* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // required bytes exchange_id = 3;
  bool has_exchange_id() const;
  void clear_exchange_id();
  static const int kExchangeIdFieldNumber = 3;
  const ::std::string& exchange_id() const;
  void set_exchange_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_id(::std::string&& value);
  #endif
  void set_exchange_id(const char* value);
  void set_exchange_id(const void* value, size_t size);
  ::std::string* mutable_exchange_id();
  ::std::string* release_exchange_id();
  void set_allocated_exchange_id(::std::string* exchange_id);

  // required bytes exchange_symbol = 4;
  bool has_exchange_symbol() const;
  void clear_exchange_symbol();
  static const int kExchangeSymbolFieldNumber = 4;
  const ::std::string& exchange_symbol() const;
  void set_exchange_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_symbol(::std::string&& value);
  #endif
  void set_exchange_symbol(const char* value);
  void set_exchange_symbol(const void* value, size_t size);
  ::std::string* mutable_exchange_symbol();
  ::std::string* release_exchange_symbol();
  void set_allocated_exchange_symbol(::std::string* exchange_symbol);

  // required bytes update_time = 21;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 21;
  const ::std::string& update_time() const;
  void set_update_time(const ::std::string& value);
  #if LANG_CXX11
  void set_update_time(::std::string&& value);
  #endif
  void set_update_time(const char* value);
  void set_update_time(const void* value, size_t size);
  ::std::string* mutable_update_time();
  ::std::string* release_update_time();
  void set_allocated_update_time(::std::string* update_time);

  // required bytes action_day = 25;
  bool has_action_day() const;
  void clear_action_day();
  static const int kActionDayFieldNumber = 25;
  const ::std::string& action_day() const;
  void set_action_day(const ::std::string& value);
  #if LANG_CXX11
  void set_action_day(::std::string&& value);
  #endif
  void set_action_day(const char* value);
  void set_action_day(const void* value, size_t size);
  ::std::string* mutable_action_day();
  ::std::string* release_action_day();
  void set_allocated_action_day(::std::string* action_day);

  // required bytes instrument_name = 26;
  bool has_instrument_name() const;
  void clear_instrument_name();
  static const int kInstrumentNameFieldNumber = 26;
  const ::std::string& instrument_name() const;
  void set_instrument_name(const ::std::string& value);
  #if LANG_CXX11
  void set_instrument_name(::std::string&& value);
  #endif
  void set_instrument_name(const char* value);
  void set_instrument_name(const void* value, size_t size);
  ::std::string* mutable_instrument_name();
  ::std::string* release_instrument_name();
  void set_allocated_instrument_name(::std::string* instrument_name);

  // required bytes product_id = 27;
  bool has_product_id() const;
  void clear_product_id();
  static const int kProductIdFieldNumber = 27;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const void* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // required double last_price = 5;
  bool has_last_price() const;
  void clear_last_price();
  static const int kLastPriceFieldNumber = 5;
  double last_price() const;
  void set_last_price(double value);

  // required double pre_settlement_price = 6;
  bool has_pre_settlement_price() const;
  void clear_pre_settlement_price();
  static const int kPreSettlementPriceFieldNumber = 6;
  double pre_settlement_price() const;
  void set_pre_settlement_price(double value);

  // required double pre_close_price = 7;
  bool has_pre_close_price() const;
  void clear_pre_close_price();
  static const int kPreClosePriceFieldNumber = 7;
  double pre_close_price() const;
  void set_pre_close_price(double value);

  // required double pre_open_interest = 8;
  bool has_pre_open_interest() const;
  void clear_pre_open_interest();
  static const int kPreOpenInterestFieldNumber = 8;
  double pre_open_interest() const;
  void set_pre_open_interest(double value);

  // required double open_price = 9;
  bool has_open_price() const;
  void clear_open_price();
  static const int kOpenPriceFieldNumber = 9;
  double open_price() const;
  void set_open_price(double value);

  // required double highest_price = 10;
  bool has_highest_price() const;
  void clear_highest_price();
  static const int kHighestPriceFieldNumber = 10;
  double highest_price() const;
  void set_highest_price(double value);

  // required double lowest_price = 11;
  bool has_lowest_price() const;
  void clear_lowest_price();
  static const int kLowestPriceFieldNumber = 11;
  double lowest_price() const;
  void set_lowest_price(double value);

  // required double volume = 12;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 12;
  double volume() const;
  void set_volume(double value);

  // required double turnover = 13;
  bool has_turnover() const;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 13;
  double turnover() const;
  void set_turnover(double value);

  // required double open_interest = 14;
  bool has_open_interest() const;
  void clear_open_interest();
  static const int kOpenInterestFieldNumber = 14;
  double open_interest() const;
  void set_open_interest(double value);

  // required double close_price = 15;
  bool has_close_price() const;
  void clear_close_price();
  static const int kClosePriceFieldNumber = 15;
  double close_price() const;
  void set_close_price(double value);

  // required double settlement_price = 16;
  bool has_settlement_price() const;
  void clear_settlement_price();
  static const int kSettlementPriceFieldNumber = 16;
  double settlement_price() const;
  void set_settlement_price(double value);

  // required double upper_limit_price = 17;
  bool has_upper_limit_price() const;
  void clear_upper_limit_price();
  static const int kUpperLimitPriceFieldNumber = 17;
  double upper_limit_price() const;
  void set_upper_limit_price(double value);

  // required double lower_limit_price = 18;
  bool has_lower_limit_price() const;
  void clear_lower_limit_price();
  static const int kLowerLimitPriceFieldNumber = 18;
  double lower_limit_price() const;
  void set_lower_limit_price(double value);

  // required double pre_delta = 19;
  bool has_pre_delta() const;
  void clear_pre_delta();
  static const int kPreDeltaFieldNumber = 19;
  double pre_delta() const;
  void set_pre_delta(double value);

  // required double curr_delta = 20;
  bool has_curr_delta() const;
  void clear_curr_delta();
  static const int kCurrDeltaFieldNumber = 20;
  double curr_delta() const;
  void set_curr_delta(double value);

  // required double average_price = 23;
  bool has_average_price() const;
  void clear_average_price();
  static const int kAveragePriceFieldNumber = 23;
  double average_price() const;
  void set_average_price(double value);

  // required int64 current_time = 24;
  bool has_current_time() const;
  void clear_current_time();
  static const int kCurrentTimeFieldNumber = 24;
  ::google::protobuf::int64 current_time() const;
  void set_current_time(::google::protobuf::int64 value);

  // required int32 update_millisec = 22;
  bool has_update_millisec() const;
  void clear_update_millisec();
  static const int kUpdateMillisecFieldNumber = 22;
  ::google::protobuf::int32 update_millisec() const;
  void set_update_millisec(::google::protobuf::int32 value);

  // required int32 bid_volume_one = 29;
  bool has_bid_volume_one() const;
  void clear_bid_volume_one();
  static const int kBidVolumeOneFieldNumber = 29;
  ::google::protobuf::int32 bid_volume_one() const;
  void set_bid_volume_one(::google::protobuf::int32 value);

  // required double bid_price_one = 28;
  bool has_bid_price_one() const;
  void clear_bid_price_one();
  static const int kBidPriceOneFieldNumber = 28;
  double bid_price_one() const;
  void set_bid_price_one(double value);

  // required double ask_price_one = 30;
  bool has_ask_price_one() const;
  void clear_ask_price_one();
  static const int kAskPriceOneFieldNumber = 30;
  double ask_price_one() const;
  void set_ask_price_one(double value);

  // required double bid_price_two = 32;
  bool has_bid_price_two() const;
  void clear_bid_price_two();
  static const int kBidPriceTwoFieldNumber = 32;
  double bid_price_two() const;
  void set_bid_price_two(double value);

  // required int32 ask_volume_one = 31;
  bool has_ask_volume_one() const;
  void clear_ask_volume_one();
  static const int kAskVolumeOneFieldNumber = 31;
  ::google::protobuf::int32 ask_volume_one() const;
  void set_ask_volume_one(::google::protobuf::int32 value);

  // required int32 bid_volume_two = 33;
  bool has_bid_volume_two() const;
  void clear_bid_volume_two();
  static const int kBidVolumeTwoFieldNumber = 33;
  ::google::protobuf::int32 bid_volume_two() const;
  void set_bid_volume_two(::google::protobuf::int32 value);

  // required double ask_price_two = 34;
  bool has_ask_price_two() const;
  void clear_ask_price_two();
  static const int kAskPriceTwoFieldNumber = 34;
  double ask_price_two() const;
  void set_ask_price_two(double value);

  // required double bid_price_three = 36;
  bool has_bid_price_three() const;
  void clear_bid_price_three();
  static const int kBidPriceThreeFieldNumber = 36;
  double bid_price_three() const;
  void set_bid_price_three(double value);

  // required int32 ask_volume_two = 35;
  bool has_ask_volume_two() const;
  void clear_ask_volume_two();
  static const int kAskVolumeTwoFieldNumber = 35;
  ::google::protobuf::int32 ask_volume_two() const;
  void set_ask_volume_two(::google::protobuf::int32 value);

  // required int32 bid_volume_three = 37;
  bool has_bid_volume_three() const;
  void clear_bid_volume_three();
  static const int kBidVolumeThreeFieldNumber = 37;
  ::google::protobuf::int32 bid_volume_three() const;
  void set_bid_volume_three(::google::protobuf::int32 value);

  // required double ask_price_three = 38;
  bool has_ask_price_three() const;
  void clear_ask_price_three();
  static const int kAskPriceThreeFieldNumber = 38;
  double ask_price_three() const;
  void set_ask_price_three(double value);

  // required double bid_price_four = 40;
  bool has_bid_price_four() const;
  void clear_bid_price_four();
  static const int kBidPriceFourFieldNumber = 40;
  double bid_price_four() const;
  void set_bid_price_four(double value);

  // required int32 ask_volume_three = 39;
  bool has_ask_volume_three() const;
  void clear_ask_volume_three();
  static const int kAskVolumeThreeFieldNumber = 39;
  ::google::protobuf::int32 ask_volume_three() const;
  void set_ask_volume_three(::google::protobuf::int32 value);

  // required int32 bid_volume_four = 41;
  bool has_bid_volume_four() const;
  void clear_bid_volume_four();
  static const int kBidVolumeFourFieldNumber = 41;
  ::google::protobuf::int32 bid_volume_four() const;
  void set_bid_volume_four(::google::protobuf::int32 value);

  // required double ask_price_four = 42;
  bool has_ask_price_four() const;
  void clear_ask_price_four();
  static const int kAskPriceFourFieldNumber = 42;
  double ask_price_four() const;
  void set_ask_price_four(double value);

  // required double bid_price_five = 44;
  bool has_bid_price_five() const;
  void clear_bid_price_five();
  static const int kBidPriceFiveFieldNumber = 44;
  double bid_price_five() const;
  void set_bid_price_five(double value);

  // required int32 ask_volume_four = 43;
  bool has_ask_volume_four() const;
  void clear_ask_volume_four();
  static const int kAskVolumeFourFieldNumber = 43;
  ::google::protobuf::int32 ask_volume_four() const;
  void set_ask_volume_four(::google::protobuf::int32 value);

  // required int32 bid_volume_five = 45;
  bool has_bid_volume_five() const;
  void clear_bid_volume_five();
  static const int kBidVolumeFiveFieldNumber = 45;
  ::google::protobuf::int32 bid_volume_five() const;
  void set_bid_volume_five(::google::protobuf::int32 value);

  // required double ask_price_five = 46;
  bool has_ask_price_five() const;
  void clear_ask_price_five();
  static const int kAskPriceFiveFieldNumber = 46;
  double ask_price_five() const;
  void set_ask_price_five(double value);

  // required double bid_price_six = 48;
  bool has_bid_price_six() const;
  void clear_bid_price_six();
  static const int kBidPriceSixFieldNumber = 48;
  double bid_price_six() const;
  void set_bid_price_six(double value);

  // required int32 ask_volume_five = 47;
  bool has_ask_volume_five() const;
  void clear_ask_volume_five();
  static const int kAskVolumeFiveFieldNumber = 47;
  ::google::protobuf::int32 ask_volume_five() const;
  void set_ask_volume_five(::google::protobuf::int32 value);

  // required int32 bid_volume_six = 49;
  bool has_bid_volume_six() const;
  void clear_bid_volume_six();
  static const int kBidVolumeSixFieldNumber = 49;
  ::google::protobuf::int32 bid_volume_six() const;
  void set_bid_volume_six(::google::protobuf::int32 value);

  // required double ask_price_six = 50;
  bool has_ask_price_six() const;
  void clear_ask_price_six();
  static const int kAskPriceSixFieldNumber = 50;
  double ask_price_six() const;
  void set_ask_price_six(double value);

  // required double bid_price_seven = 52;
  bool has_bid_price_seven() const;
  void clear_bid_price_seven();
  static const int kBidPriceSevenFieldNumber = 52;
  double bid_price_seven() const;
  void set_bid_price_seven(double value);

  // required int32 ask_volume_six = 51;
  bool has_ask_volume_six() const;
  void clear_ask_volume_six();
  static const int kAskVolumeSixFieldNumber = 51;
  ::google::protobuf::int32 ask_volume_six() const;
  void set_ask_volume_six(::google::protobuf::int32 value);

  // required int32 bid_volume_seven = 53;
  bool has_bid_volume_seven() const;
  void clear_bid_volume_seven();
  static const int kBidVolumeSevenFieldNumber = 53;
  ::google::protobuf::int32 bid_volume_seven() const;
  void set_bid_volume_seven(::google::protobuf::int32 value);

  // required double ask_price_seven = 54;
  bool has_ask_price_seven() const;
  void clear_ask_price_seven();
  static const int kAskPriceSevenFieldNumber = 54;
  double ask_price_seven() const;
  void set_ask_price_seven(double value);

  // required double bid_price_eight = 56;
  bool has_bid_price_eight() const;
  void clear_bid_price_eight();
  static const int kBidPriceEightFieldNumber = 56;
  double bid_price_eight() const;
  void set_bid_price_eight(double value);

  // required int32 ask_volume_seven = 55;
  bool has_ask_volume_seven() const;
  void clear_ask_volume_seven();
  static const int kAskVolumeSevenFieldNumber = 55;
  ::google::protobuf::int32 ask_volume_seven() const;
  void set_ask_volume_seven(::google::protobuf::int32 value);

  // required int32 bid_volume_eight = 57;
  bool has_bid_volume_eight() const;
  void clear_bid_volume_eight();
  static const int kBidVolumeEightFieldNumber = 57;
  ::google::protobuf::int32 bid_volume_eight() const;
  void set_bid_volume_eight(::google::protobuf::int32 value);

  // required double ask_price_eight = 58;
  bool has_ask_price_eight() const;
  void clear_ask_price_eight();
  static const int kAskPriceEightFieldNumber = 58;
  double ask_price_eight() const;
  void set_ask_price_eight(double value);

  // required double bid_price_nine = 60;
  bool has_bid_price_nine() const;
  void clear_bid_price_nine();
  static const int kBidPriceNineFieldNumber = 60;
  double bid_price_nine() const;
  void set_bid_price_nine(double value);

  // required int32 ask_volume_eight = 59;
  bool has_ask_volume_eight() const;
  void clear_ask_volume_eight();
  static const int kAskVolumeEightFieldNumber = 59;
  ::google::protobuf::int32 ask_volume_eight() const;
  void set_ask_volume_eight(::google::protobuf::int32 value);

  // required int32 bid_volume_nine = 61;
  bool has_bid_volume_nine() const;
  void clear_bid_volume_nine();
  static const int kBidVolumeNineFieldNumber = 61;
  ::google::protobuf::int32 bid_volume_nine() const;
  void set_bid_volume_nine(::google::protobuf::int32 value);

  // required double ask_price_nine = 62;
  bool has_ask_price_nine() const;
  void clear_ask_price_nine();
  static const int kAskPriceNineFieldNumber = 62;
  double ask_price_nine() const;
  void set_ask_price_nine(double value);

  // required double bid_price_ten = 64;
  bool has_bid_price_ten() const;
  void clear_bid_price_ten();
  static const int kBidPriceTenFieldNumber = 64;
  double bid_price_ten() const;
  void set_bid_price_ten(double value);

  // required int32 ask_volume_nine = 63;
  bool has_ask_volume_nine() const;
  void clear_ask_volume_nine();
  static const int kAskVolumeNineFieldNumber = 63;
  ::google::protobuf::int32 ask_volume_nine() const;
  void set_ask_volume_nine(::google::protobuf::int32 value);

  // required int32 bid_volume_ten = 65;
  bool has_bid_volume_ten() const;
  void clear_bid_volume_ten();
  static const int kBidVolumeTenFieldNumber = 65;
  ::google::protobuf::int32 bid_volume_ten() const;
  void set_bid_volume_ten(::google::protobuf::int32 value);

  // required double ask_price_ten = 66;
  bool has_ask_price_ten() const;
  void clear_ask_price_ten();
  static const int kAskPriceTenFieldNumber = 66;
  double ask_price_ten() const;
  void set_ask_price_ten(double value);

  // required int32 ask_volume_ten = 67;
  bool has_ask_volume_ten() const;
  void clear_ask_volume_ten();
  static const int kAskVolumeTenFieldNumber = 67;
  ::google::protobuf::int32 ask_volume_ten() const;
  void set_ask_volume_ten(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:simnow_logic.DepthMarket)
 private:
  void set_has_trading_day();
  void clear_has_trading_day();
  void set_has_symbol();
  void clear_has_symbol();
  void set_has_exchange_id();
  void clear_has_exchange_id();
  void set_has_exchange_symbol();
  void clear_has_exchange_symbol();
  void set_has_last_price();
  void clear_has_last_price();
  void set_has_pre_settlement_price();
  void clear_has_pre_settlement_price();
  void set_has_pre_close_price();
  void clear_has_pre_close_price();
  void set_has_pre_open_interest();
  void clear_has_pre_open_interest();
  void set_has_open_price();
  void clear_has_open_price();
  void set_has_highest_price();
  void clear_has_highest_price();
  void set_has_lowest_price();
  void clear_has_lowest_price();
  void set_has_volume();
  void clear_has_volume();
  void set_has_turnover();
  void clear_has_turnover();
  void set_has_open_interest();
  void clear_has_open_interest();
  void set_has_close_price();
  void clear_has_close_price();
  void set_has_settlement_price();
  void clear_has_settlement_price();
  void set_has_upper_limit_price();
  void clear_has_upper_limit_price();
  void set_has_lower_limit_price();
  void clear_has_lower_limit_price();
  void set_has_pre_delta();
  void clear_has_pre_delta();
  void set_has_curr_delta();
  void clear_has_curr_delta();
  void set_has_update_time();
  void clear_has_update_time();
  void set_has_update_millisec();
  void clear_has_update_millisec();
  void set_has_average_price();
  void clear_has_average_price();
  void set_has_current_time();
  void clear_has_current_time();
  void set_has_action_day();
  void clear_has_action_day();
  void set_has_instrument_name();
  void clear_has_instrument_name();
  void set_has_product_id();
  void clear_has_product_id();
  void set_has_bid_price_one();
  void clear_has_bid_price_one();
  void set_has_bid_volume_one();
  void clear_has_bid_volume_one();
  void set_has_ask_price_one();
  void clear_has_ask_price_one();
  void set_has_ask_volume_one();
  void clear_has_ask_volume_one();
  void set_has_bid_price_two();
  void clear_has_bid_price_two();
  void set_has_bid_volume_two();
  void clear_has_bid_volume_two();
  void set_has_ask_price_two();
  void clear_has_ask_price_two();
  void set_has_ask_volume_two();
  void clear_has_ask_volume_two();
  void set_has_bid_price_three();
  void clear_has_bid_price_three();
  void set_has_bid_volume_three();
  void clear_has_bid_volume_three();
  void set_has_ask_price_three();
  void clear_has_ask_price_three();
  void set_has_ask_volume_three();
  void clear_has_ask_volume_three();
  void set_has_bid_price_four();
  void clear_has_bid_price_four();
  void set_has_bid_volume_four();
  void clear_has_bid_volume_four();
  void set_has_ask_price_four();
  void clear_has_ask_price_four();
  void set_has_ask_volume_four();
  void clear_has_ask_volume_four();
  void set_has_bid_price_five();
  void clear_has_bid_price_five();
  void set_has_bid_volume_five();
  void clear_has_bid_volume_five();
  void set_has_ask_price_five();
  void clear_has_ask_price_five();
  void set_has_ask_volume_five();
  void clear_has_ask_volume_five();
  void set_has_bid_price_six();
  void clear_has_bid_price_six();
  void set_has_bid_volume_six();
  void clear_has_bid_volume_six();
  void set_has_ask_price_six();
  void clear_has_ask_price_six();
  void set_has_ask_volume_six();
  void clear_has_ask_volume_six();
  void set_has_bid_price_seven();
  void clear_has_bid_price_seven();
  void set_has_bid_volume_seven();
  void clear_has_bid_volume_seven();
  void set_has_ask_price_seven();
  void clear_has_ask_price_seven();
  void set_has_ask_volume_seven();
  void clear_has_ask_volume_seven();
  void set_has_bid_price_eight();
  void clear_has_bid_price_eight();
  void set_has_bid_volume_eight();
  void clear_has_bid_volume_eight();
  void set_has_ask_price_eight();
  void clear_has_ask_price_eight();
  void set_has_ask_volume_eight();
  void clear_has_ask_volume_eight();
  void set_has_bid_price_nine();
  void clear_has_bid_price_nine();
  void set_has_bid_volume_nine();
  void clear_has_bid_volume_nine();
  void set_has_ask_price_nine();
  void clear_has_ask_price_nine();
  void set_has_ask_volume_nine();
  void clear_has_ask_volume_nine();
  void set_has_bid_price_ten();
  void clear_has_bid_price_ten();
  void set_has_bid_volume_ten();
  void clear_has_bid_volume_ten();
  void set_has_ask_price_ten();
  void clear_has_ask_price_ten();
  void set_has_ask_volume_ten();
  void clear_has_ask_volume_ten();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<3> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr trading_day_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_id_;
  ::google::protobuf::internal::ArenaStringPtr exchange_symbol_;
  ::google::protobuf::internal::ArenaStringPtr update_time_;
  ::google::protobuf::internal::ArenaStringPtr action_day_;
  ::google::protobuf::internal::ArenaStringPtr instrument_name_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  double last_price_;
  double pre_settlement_price_;
  double pre_close_price_;
  double pre_open_interest_;
  double open_price_;
  double highest_price_;
  double lowest_price_;
  double volume_;
  double turnover_;
  double open_interest_;
  double close_price_;
  double settlement_price_;
  double upper_limit_price_;
  double lower_limit_price_;
  double pre_delta_;
  double curr_delta_;
  double average_price_;
  ::google::protobuf::int64 current_time_;
  ::google::protobuf::int32 update_millisec_;
  ::google::protobuf::int32 bid_volume_one_;
  double bid_price_one_;
  double ask_price_one_;
  double bid_price_two_;
  ::google::protobuf::int32 ask_volume_one_;
  ::google::protobuf::int32 bid_volume_two_;
  double ask_price_two_;
  double bid_price_three_;
  ::google::protobuf::int32 ask_volume_two_;
  ::google::protobuf::int32 bid_volume_three_;
  double ask_price_three_;
  double bid_price_four_;
  ::google::protobuf::int32 ask_volume_three_;
  ::google::protobuf::int32 bid_volume_four_;
  double ask_price_four_;
  double bid_price_five_;
  ::google::protobuf::int32 ask_volume_four_;
  ::google::protobuf::int32 bid_volume_five_;
  double ask_price_five_;
  double bid_price_six_;
  ::google::protobuf::int32 ask_volume_five_;
  ::google::protobuf::int32 bid_volume_six_;
  double ask_price_six_;
  double bid_price_seven_;
  ::google::protobuf::int32 ask_volume_six_;
  ::google::protobuf::int32 bid_volume_seven_;
  double ask_price_seven_;
  double bid_price_eight_;
  ::google::protobuf::int32 ask_volume_seven_;
  ::google::protobuf::int32 bid_volume_eight_;
  double ask_price_eight_;
  double bid_price_nine_;
  ::google::protobuf::int32 ask_volume_eight_;
  ::google::protobuf::int32 bid_volume_nine_;
  double ask_price_nine_;
  double bid_price_ten_;
  ::google::protobuf::int32 ask_volume_nine_;
  ::google::protobuf::int32 bid_volume_ten_;
  double ask_price_ten_;
  ::google::protobuf::int32 ask_volume_ten_;
  friend struct protobuf_depth_5fmarket_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DepthMarket

// required bytes trading_day = 1;
inline bool DepthMarket::has_trading_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DepthMarket::set_has_trading_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DepthMarket::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DepthMarket::clear_trading_day() {
  trading_day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trading_day();
}
inline const ::std::string& DepthMarket::trading_day() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.trading_day)
  return trading_day_.GetNoArena();
}
inline void DepthMarket::set_trading_day(const ::std::string& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.trading_day)
}
#if LANG_CXX11
inline void DepthMarket::set_trading_day(::std::string&& value) {
  set_has_trading_day();
  trading_day_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.trading_day)
}
#endif
inline void DepthMarket::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.trading_day)
}
inline void DepthMarket::set_trading_day(const void* value, size_t size) {
  set_has_trading_day();
  trading_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.trading_day)
}
inline ::std::string* DepthMarket::mutable_trading_day() {
  set_has_trading_day();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.trading_day)
  return trading_day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DepthMarket::release_trading_day() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.trading_day)
  clear_has_trading_day();
  return trading_day_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DepthMarket::set_allocated_trading_day(::std::string* trading_day) {
  if (trading_day != NULL) {
    set_has_trading_day();
  } else {
    clear_has_trading_day();
  }
  trading_day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trading_day);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.trading_day)
}

// required bytes symbol = 2;
inline bool DepthMarket::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DepthMarket::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DepthMarket::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DepthMarket::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
inline const ::std::string& DepthMarket::symbol() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.symbol)
  return symbol_.GetNoArena();
}
inline void DepthMarket::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.symbol)
}
#if LANG_CXX11
inline void DepthMarket::set_symbol(::std::string&& value) {
  set_has_symbol();
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.symbol)
}
#endif
inline void DepthMarket::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.symbol)
}
inline void DepthMarket::set_symbol(const void* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.symbol)
}
inline ::std::string* DepthMarket::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DepthMarket::release_symbol() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DepthMarket::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.symbol)
}

// required bytes exchange_id = 3;
inline bool DepthMarket::has_exchange_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DepthMarket::set_has_exchange_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DepthMarket::clear_has_exchange_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DepthMarket::clear_exchange_id() {
  exchange_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange_id();
}
inline const ::std::string& DepthMarket::exchange_id() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.exchange_id)
  return exchange_id_.GetNoArena();
}
inline void DepthMarket::set_exchange_id(const ::std::string& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.exchange_id)
}
#if LANG_CXX11
inline void DepthMarket::set_exchange_id(::std::string&& value) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.exchange_id)
}
#endif
inline void DepthMarket::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.exchange_id)
}
inline void DepthMarket::set_exchange_id(const void* value, size_t size) {
  set_has_exchange_id();
  exchange_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.exchange_id)
}
inline ::std::string* DepthMarket::mutable_exchange_id() {
  set_has_exchange_id();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.exchange_id)
  return exchange_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DepthMarket::release_exchange_id() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.exchange_id)
  clear_has_exchange_id();
  return exchange_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DepthMarket::set_allocated_exchange_id(::std::string* exchange_id) {
  if (exchange_id != NULL) {
    set_has_exchange_id();
  } else {
    clear_has_exchange_id();
  }
  exchange_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_id);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.exchange_id)
}

// required bytes exchange_symbol = 4;
inline bool DepthMarket::has_exchange_symbol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DepthMarket::set_has_exchange_symbol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DepthMarket::clear_has_exchange_symbol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DepthMarket::clear_exchange_symbol() {
  exchange_symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exchange_symbol();
}
inline const ::std::string& DepthMarket::exchange_symbol() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.exchange_symbol)
  return exchange_symbol_.GetNoArena();
}
inline void DepthMarket::set_exchange_symbol(const ::std::string& value) {
  set_has_exchange_symbol();
  exchange_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.exchange_symbol)
}
#if LANG_CXX11
inline void DepthMarket::set_exchange_symbol(::std::string&& value) {
  set_has_exchange_symbol();
  exchange_symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.exchange_symbol)
}
#endif
inline void DepthMarket::set_exchange_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exchange_symbol();
  exchange_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.exchange_symbol)
}
inline void DepthMarket::set_exchange_symbol(const void* value, size_t size) {
  set_has_exchange_symbol();
  exchange_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.exchange_symbol)
}
inline ::std::string* DepthMarket::mutable_exchange_symbol() {
  set_has_exchange_symbol();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.exchange_symbol)
  return exchange_symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DepthMarket::release_exchange_symbol() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.exchange_symbol)
  clear_has_exchange_symbol();
  return exchange_symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DepthMarket::set_allocated_exchange_symbol(::std::string* exchange_symbol) {
  if (exchange_symbol != NULL) {
    set_has_exchange_symbol();
  } else {
    clear_has_exchange_symbol();
  }
  exchange_symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_symbol);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.exchange_symbol)
}

// required double last_price = 5;
inline bool DepthMarket::has_last_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DepthMarket::set_has_last_price() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DepthMarket::clear_has_last_price() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DepthMarket::clear_last_price() {
  last_price_ = 0;
  clear_has_last_price();
}
inline double DepthMarket::last_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.last_price)
  return last_price_;
}
inline void DepthMarket::set_last_price(double value) {
  set_has_last_price();
  last_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.last_price)
}

// required double pre_settlement_price = 6;
inline bool DepthMarket::has_pre_settlement_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DepthMarket::set_has_pre_settlement_price() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DepthMarket::clear_has_pre_settlement_price() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DepthMarket::clear_pre_settlement_price() {
  pre_settlement_price_ = 0;
  clear_has_pre_settlement_price();
}
inline double DepthMarket::pre_settlement_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.pre_settlement_price)
  return pre_settlement_price_;
}
inline void DepthMarket::set_pre_settlement_price(double value) {
  set_has_pre_settlement_price();
  pre_settlement_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.pre_settlement_price)
}

// required double pre_close_price = 7;
inline bool DepthMarket::has_pre_close_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DepthMarket::set_has_pre_close_price() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DepthMarket::clear_has_pre_close_price() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DepthMarket::clear_pre_close_price() {
  pre_close_price_ = 0;
  clear_has_pre_close_price();
}
inline double DepthMarket::pre_close_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.pre_close_price)
  return pre_close_price_;
}
inline void DepthMarket::set_pre_close_price(double value) {
  set_has_pre_close_price();
  pre_close_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.pre_close_price)
}

// required double pre_open_interest = 8;
inline bool DepthMarket::has_pre_open_interest() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DepthMarket::set_has_pre_open_interest() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DepthMarket::clear_has_pre_open_interest() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DepthMarket::clear_pre_open_interest() {
  pre_open_interest_ = 0;
  clear_has_pre_open_interest();
}
inline double DepthMarket::pre_open_interest() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.pre_open_interest)
  return pre_open_interest_;
}
inline void DepthMarket::set_pre_open_interest(double value) {
  set_has_pre_open_interest();
  pre_open_interest_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.pre_open_interest)
}

// required double open_price = 9;
inline bool DepthMarket::has_open_price() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DepthMarket::set_has_open_price() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DepthMarket::clear_has_open_price() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DepthMarket::clear_open_price() {
  open_price_ = 0;
  clear_has_open_price();
}
inline double DepthMarket::open_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.open_price)
  return open_price_;
}
inline void DepthMarket::set_open_price(double value) {
  set_has_open_price();
  open_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.open_price)
}

// required double highest_price = 10;
inline bool DepthMarket::has_highest_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DepthMarket::set_has_highest_price() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DepthMarket::clear_has_highest_price() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DepthMarket::clear_highest_price() {
  highest_price_ = 0;
  clear_has_highest_price();
}
inline double DepthMarket::highest_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.highest_price)
  return highest_price_;
}
inline void DepthMarket::set_highest_price(double value) {
  set_has_highest_price();
  highest_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.highest_price)
}

// required double lowest_price = 11;
inline bool DepthMarket::has_lowest_price() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DepthMarket::set_has_lowest_price() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DepthMarket::clear_has_lowest_price() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DepthMarket::clear_lowest_price() {
  lowest_price_ = 0;
  clear_has_lowest_price();
}
inline double DepthMarket::lowest_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.lowest_price)
  return lowest_price_;
}
inline void DepthMarket::set_lowest_price(double value) {
  set_has_lowest_price();
  lowest_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.lowest_price)
}

// required double volume = 12;
inline bool DepthMarket::has_volume() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DepthMarket::set_has_volume() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DepthMarket::clear_has_volume() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DepthMarket::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline double DepthMarket::volume() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.volume)
  return volume_;
}
inline void DepthMarket::set_volume(double value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.volume)
}

// required double turnover = 13;
inline bool DepthMarket::has_turnover() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DepthMarket::set_has_turnover() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DepthMarket::clear_has_turnover() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DepthMarket::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double DepthMarket::turnover() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.turnover)
  return turnover_;
}
inline void DepthMarket::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.turnover)
}

// required double open_interest = 14;
inline bool DepthMarket::has_open_interest() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DepthMarket::set_has_open_interest() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DepthMarket::clear_has_open_interest() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DepthMarket::clear_open_interest() {
  open_interest_ = 0;
  clear_has_open_interest();
}
inline double DepthMarket::open_interest() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.open_interest)
  return open_interest_;
}
inline void DepthMarket::set_open_interest(double value) {
  set_has_open_interest();
  open_interest_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.open_interest)
}

// required double close_price = 15;
inline bool DepthMarket::has_close_price() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DepthMarket::set_has_close_price() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DepthMarket::clear_has_close_price() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DepthMarket::clear_close_price() {
  close_price_ = 0;
  clear_has_close_price();
}
inline double DepthMarket::close_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.close_price)
  return close_price_;
}
inline void DepthMarket::set_close_price(double value) {
  set_has_close_price();
  close_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.close_price)
}

// required double settlement_price = 16;
inline bool DepthMarket::has_settlement_price() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DepthMarket::set_has_settlement_price() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DepthMarket::clear_has_settlement_price() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DepthMarket::clear_settlement_price() {
  settlement_price_ = 0;
  clear_has_settlement_price();
}
inline double DepthMarket::settlement_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.settlement_price)
  return settlement_price_;
}
inline void DepthMarket::set_settlement_price(double value) {
  set_has_settlement_price();
  settlement_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.settlement_price)
}

// required double upper_limit_price = 17;
inline bool DepthMarket::has_upper_limit_price() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DepthMarket::set_has_upper_limit_price() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DepthMarket::clear_has_upper_limit_price() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DepthMarket::clear_upper_limit_price() {
  upper_limit_price_ = 0;
  clear_has_upper_limit_price();
}
inline double DepthMarket::upper_limit_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.upper_limit_price)
  return upper_limit_price_;
}
inline void DepthMarket::set_upper_limit_price(double value) {
  set_has_upper_limit_price();
  upper_limit_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.upper_limit_price)
}

// required double lower_limit_price = 18;
inline bool DepthMarket::has_lower_limit_price() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DepthMarket::set_has_lower_limit_price() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DepthMarket::clear_has_lower_limit_price() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DepthMarket::clear_lower_limit_price() {
  lower_limit_price_ = 0;
  clear_has_lower_limit_price();
}
inline double DepthMarket::lower_limit_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.lower_limit_price)
  return lower_limit_price_;
}
inline void DepthMarket::set_lower_limit_price(double value) {
  set_has_lower_limit_price();
  lower_limit_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.lower_limit_price)
}

// required double pre_delta = 19;
inline bool DepthMarket::has_pre_delta() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DepthMarket::set_has_pre_delta() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DepthMarket::clear_has_pre_delta() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DepthMarket::clear_pre_delta() {
  pre_delta_ = 0;
  clear_has_pre_delta();
}
inline double DepthMarket::pre_delta() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.pre_delta)
  return pre_delta_;
}
inline void DepthMarket::set_pre_delta(double value) {
  set_has_pre_delta();
  pre_delta_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.pre_delta)
}

// required double curr_delta = 20;
inline bool DepthMarket::has_curr_delta() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DepthMarket::set_has_curr_delta() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DepthMarket::clear_has_curr_delta() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DepthMarket::clear_curr_delta() {
  curr_delta_ = 0;
  clear_has_curr_delta();
}
inline double DepthMarket::curr_delta() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.curr_delta)
  return curr_delta_;
}
inline void DepthMarket::set_curr_delta(double value) {
  set_has_curr_delta();
  curr_delta_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.curr_delta)
}

// required bytes update_time = 21;
inline bool DepthMarket::has_update_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DepthMarket::set_has_update_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DepthMarket::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DepthMarket::clear_update_time() {
  update_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_update_time();
}
inline const ::std::string& DepthMarket::update_time() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.update_time)
  return update_time_.GetNoArena();
}
inline void DepthMarket::set_update_time(const ::std::string& value) {
  set_has_update_time();
  update_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.update_time)
}
#if LANG_CXX11
inline void DepthMarket::set_update_time(::std::string&& value) {
  set_has_update_time();
  update_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.update_time)
}
#endif
inline void DepthMarket::set_update_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_update_time();
  update_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.update_time)
}
inline void DepthMarket::set_update_time(const void* value, size_t size) {
  set_has_update_time();
  update_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.update_time)
}
inline ::std::string* DepthMarket::mutable_update_time() {
  set_has_update_time();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.update_time)
  return update_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DepthMarket::release_update_time() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.update_time)
  clear_has_update_time();
  return update_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DepthMarket::set_allocated_update_time(::std::string* update_time) {
  if (update_time != NULL) {
    set_has_update_time();
  } else {
    clear_has_update_time();
  }
  update_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_time);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.update_time)
}

// required int32 update_millisec = 22;
inline bool DepthMarket::has_update_millisec() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void DepthMarket::set_has_update_millisec() {
  _has_bits_[0] |= 0x04000000u;
}
inline void DepthMarket::clear_has_update_millisec() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void DepthMarket::clear_update_millisec() {
  update_millisec_ = 0;
  clear_has_update_millisec();
}
inline ::google::protobuf::int32 DepthMarket::update_millisec() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.update_millisec)
  return update_millisec_;
}
inline void DepthMarket::set_update_millisec(::google::protobuf::int32 value) {
  set_has_update_millisec();
  update_millisec_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.update_millisec)
}

// required double average_price = 23;
inline bool DepthMarket::has_average_price() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DepthMarket::set_has_average_price() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DepthMarket::clear_has_average_price() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DepthMarket::clear_average_price() {
  average_price_ = 0;
  clear_has_average_price();
}
inline double DepthMarket::average_price() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.average_price)
  return average_price_;
}
inline void DepthMarket::set_average_price(double value) {
  set_has_average_price();
  average_price_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.average_price)
}

// required int64 current_time = 24;
inline bool DepthMarket::has_current_time() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DepthMarket::set_has_current_time() {
  _has_bits_[0] |= 0x02000000u;
}
inline void DepthMarket::clear_has_current_time() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void DepthMarket::clear_current_time() {
  current_time_ = GOOGLE_LONGLONG(0);
  clear_has_current_time();
}
inline ::google::protobuf::int64 DepthMarket::current_time() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.current_time)
  return current_time_;
}
inline void DepthMarket::set_current_time(::google::protobuf::int64 value) {
  set_has_current_time();
  current_time_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.current_time)
}

// required bytes action_day = 25;
inline bool DepthMarket::has_action_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DepthMarket::set_has_action_day() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DepthMarket::clear_has_action_day() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DepthMarket::clear_action_day() {
  action_day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_action_day();
}
inline const ::std::string& DepthMarket::action_day() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.action_day)
  return action_day_.GetNoArena();
}
inline void DepthMarket::set_action_day(const ::std::string& value) {
  set_has_action_day();
  action_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.action_day)
}
#if LANG_CXX11
inline void DepthMarket::set_action_day(::std::string&& value) {
  set_has_action_day();
  action_day_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.action_day)
}
#endif
inline void DepthMarket::set_action_day(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_action_day();
  action_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.action_day)
}
inline void DepthMarket::set_action_day(const void* value, size_t size) {
  set_has_action_day();
  action_day_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.action_day)
}
inline ::std::string* DepthMarket::mutable_action_day() {
  set_has_action_day();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.action_day)
  return action_day_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DepthMarket::release_action_day() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.action_day)
  clear_has_action_day();
  return action_day_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DepthMarket::set_allocated_action_day(::std::string* action_day) {
  if (action_day != NULL) {
    set_has_action_day();
  } else {
    clear_has_action_day();
  }
  action_day_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_day);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.action_day)
}

// required bytes instrument_name = 26;
inline bool DepthMarket::has_instrument_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DepthMarket::set_has_instrument_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DepthMarket::clear_has_instrument_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DepthMarket::clear_instrument_name() {
  instrument_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_instrument_name();
}
inline const ::std::string& DepthMarket::instrument_name() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.instrument_name)
  return instrument_name_.GetNoArena();
}
inline void DepthMarket::set_instrument_name(const ::std::string& value) {
  set_has_instrument_name();
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.instrument_name)
}
#if LANG_CXX11
inline void DepthMarket::set_instrument_name(::std::string&& value) {
  set_has_instrument_name();
  instrument_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.instrument_name)
}
#endif
inline void DepthMarket::set_instrument_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_instrument_name();
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.instrument_name)
}
inline void DepthMarket::set_instrument_name(const void* value, size_t size) {
  set_has_instrument_name();
  instrument_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.instrument_name)
}
inline ::std::string* DepthMarket::mutable_instrument_name() {
  set_has_instrument_name();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.instrument_name)
  return instrument_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DepthMarket::release_instrument_name() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.instrument_name)
  clear_has_instrument_name();
  return instrument_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DepthMarket::set_allocated_instrument_name(::std::string* instrument_name) {
  if (instrument_name != NULL) {
    set_has_instrument_name();
  } else {
    clear_has_instrument_name();
  }
  instrument_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrument_name);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.instrument_name)
}

// required bytes product_id = 27;
inline bool DepthMarket::has_product_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DepthMarket::set_has_product_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DepthMarket::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DepthMarket::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product_id();
}
inline const ::std::string& DepthMarket::product_id() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.product_id)
  return product_id_.GetNoArena();
}
inline void DepthMarket::set_product_id(const ::std::string& value) {
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.product_id)
}
#if LANG_CXX11
inline void DepthMarket::set_product_id(::std::string&& value) {
  set_has_product_id();
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simnow_logic.DepthMarket.product_id)
}
#endif
inline void DepthMarket::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simnow_logic.DepthMarket.product_id)
}
inline void DepthMarket::set_product_id(const void* value, size_t size) {
  set_has_product_id();
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simnow_logic.DepthMarket.product_id)
}
inline ::std::string* DepthMarket::mutable_product_id() {
  set_has_product_id();
  // @@protoc_insertion_point(field_mutable:simnow_logic.DepthMarket.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DepthMarket::release_product_id() {
  // @@protoc_insertion_point(field_release:simnow_logic.DepthMarket.product_id)
  clear_has_product_id();
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DepthMarket::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    set_has_product_id();
  } else {
    clear_has_product_id();
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:simnow_logic.DepthMarket.product_id)
}

// required double bid_price_one = 28;
inline bool DepthMarket::has_bid_price_one() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void DepthMarket::set_has_bid_price_one() {
  _has_bits_[0] |= 0x10000000u;
}
inline void DepthMarket::clear_has_bid_price_one() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void DepthMarket::clear_bid_price_one() {
  bid_price_one_ = 0;
  clear_has_bid_price_one();
}
inline double DepthMarket::bid_price_one() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_one)
  return bid_price_one_;
}
inline void DepthMarket::set_bid_price_one(double value) {
  set_has_bid_price_one();
  bid_price_one_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_one)
}

// required int32 bid_volume_one = 29;
inline bool DepthMarket::has_bid_volume_one() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void DepthMarket::set_has_bid_volume_one() {
  _has_bits_[0] |= 0x08000000u;
}
inline void DepthMarket::clear_has_bid_volume_one() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void DepthMarket::clear_bid_volume_one() {
  bid_volume_one_ = 0;
  clear_has_bid_volume_one();
}
inline ::google::protobuf::int32 DepthMarket::bid_volume_one() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_one)
  return bid_volume_one_;
}
inline void DepthMarket::set_bid_volume_one(::google::protobuf::int32 value) {
  set_has_bid_volume_one();
  bid_volume_one_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_one)
}

// required double ask_price_one = 30;
inline bool DepthMarket::has_ask_price_one() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void DepthMarket::set_has_ask_price_one() {
  _has_bits_[0] |= 0x20000000u;
}
inline void DepthMarket::clear_has_ask_price_one() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void DepthMarket::clear_ask_price_one() {
  ask_price_one_ = 0;
  clear_has_ask_price_one();
}
inline double DepthMarket::ask_price_one() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_one)
  return ask_price_one_;
}
inline void DepthMarket::set_ask_price_one(double value) {
  set_has_ask_price_one();
  ask_price_one_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_one)
}

// required int32 ask_volume_one = 31;
inline bool DepthMarket::has_ask_volume_one() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void DepthMarket::set_has_ask_volume_one() {
  _has_bits_[0] |= 0x80000000u;
}
inline void DepthMarket::clear_has_ask_volume_one() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void DepthMarket::clear_ask_volume_one() {
  ask_volume_one_ = 0;
  clear_has_ask_volume_one();
}
inline ::google::protobuf::int32 DepthMarket::ask_volume_one() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_one)
  return ask_volume_one_;
}
inline void DepthMarket::set_ask_volume_one(::google::protobuf::int32 value) {
  set_has_ask_volume_one();
  ask_volume_one_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_one)
}

// required double bid_price_two = 32;
inline bool DepthMarket::has_bid_price_two() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void DepthMarket::set_has_bid_price_two() {
  _has_bits_[0] |= 0x40000000u;
}
inline void DepthMarket::clear_has_bid_price_two() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void DepthMarket::clear_bid_price_two() {
  bid_price_two_ = 0;
  clear_has_bid_price_two();
}
inline double DepthMarket::bid_price_two() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_two)
  return bid_price_two_;
}
inline void DepthMarket::set_bid_price_two(double value) {
  set_has_bid_price_two();
  bid_price_two_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_two)
}

// required int32 bid_volume_two = 33;
inline bool DepthMarket::has_bid_volume_two() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void DepthMarket::set_has_bid_volume_two() {
  _has_bits_[1] |= 0x00000001u;
}
inline void DepthMarket::clear_has_bid_volume_two() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void DepthMarket::clear_bid_volume_two() {
  bid_volume_two_ = 0;
  clear_has_bid_volume_two();
}
inline ::google::protobuf::int32 DepthMarket::bid_volume_two() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_two)
  return bid_volume_two_;
}
inline void DepthMarket::set_bid_volume_two(::google::protobuf::int32 value) {
  set_has_bid_volume_two();
  bid_volume_two_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_two)
}

// required double ask_price_two = 34;
inline bool DepthMarket::has_ask_price_two() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void DepthMarket::set_has_ask_price_two() {
  _has_bits_[1] |= 0x00000002u;
}
inline void DepthMarket::clear_has_ask_price_two() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void DepthMarket::clear_ask_price_two() {
  ask_price_two_ = 0;
  clear_has_ask_price_two();
}
inline double DepthMarket::ask_price_two() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_two)
  return ask_price_two_;
}
inline void DepthMarket::set_ask_price_two(double value) {
  set_has_ask_price_two();
  ask_price_two_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_two)
}

// required int32 ask_volume_two = 35;
inline bool DepthMarket::has_ask_volume_two() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void DepthMarket::set_has_ask_volume_two() {
  _has_bits_[1] |= 0x00000008u;
}
inline void DepthMarket::clear_has_ask_volume_two() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void DepthMarket::clear_ask_volume_two() {
  ask_volume_two_ = 0;
  clear_has_ask_volume_two();
}
inline ::google::protobuf::int32 DepthMarket::ask_volume_two() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_two)
  return ask_volume_two_;
}
inline void DepthMarket::set_ask_volume_two(::google::protobuf::int32 value) {
  set_has_ask_volume_two();
  ask_volume_two_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_two)
}

// required double bid_price_three = 36;
inline bool DepthMarket::has_bid_price_three() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void DepthMarket::set_has_bid_price_three() {
  _has_bits_[1] |= 0x00000004u;
}
inline void DepthMarket::clear_has_bid_price_three() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void DepthMarket::clear_bid_price_three() {
  bid_price_three_ = 0;
  clear_has_bid_price_three();
}
inline double DepthMarket::bid_price_three() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_three)
  return bid_price_three_;
}
inline void DepthMarket::set_bid_price_three(double value) {
  set_has_bid_price_three();
  bid_price_three_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_three)
}

// required int32 bid_volume_three = 37;
inline bool DepthMarket::has_bid_volume_three() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void DepthMarket::set_has_bid_volume_three() {
  _has_bits_[1] |= 0x00000010u;
}
inline void DepthMarket::clear_has_bid_volume_three() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void DepthMarket::clear_bid_volume_three() {
  bid_volume_three_ = 0;
  clear_has_bid_volume_three();
}
inline ::google::protobuf::int32 DepthMarket::bid_volume_three() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_three)
  return bid_volume_three_;
}
inline void DepthMarket::set_bid_volume_three(::google::protobuf::int32 value) {
  set_has_bid_volume_three();
  bid_volume_three_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_three)
}

// required double ask_price_three = 38;
inline bool DepthMarket::has_ask_price_three() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void DepthMarket::set_has_ask_price_three() {
  _has_bits_[1] |= 0x00000020u;
}
inline void DepthMarket::clear_has_ask_price_three() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void DepthMarket::clear_ask_price_three() {
  ask_price_three_ = 0;
  clear_has_ask_price_three();
}
inline double DepthMarket::ask_price_three() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_three)
  return ask_price_three_;
}
inline void DepthMarket::set_ask_price_three(double value) {
  set_has_ask_price_three();
  ask_price_three_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_three)
}

// required int32 ask_volume_three = 39;
inline bool DepthMarket::has_ask_volume_three() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void DepthMarket::set_has_ask_volume_three() {
  _has_bits_[1] |= 0x00000080u;
}
inline void DepthMarket::clear_has_ask_volume_three() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void DepthMarket::clear_ask_volume_three() {
  ask_volume_three_ = 0;
  clear_has_ask_volume_three();
}
inline ::google::protobuf::int32 DepthMarket::ask_volume_three() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_three)
  return ask_volume_three_;
}
inline void DepthMarket::set_ask_volume_three(::google::protobuf::int32 value) {
  set_has_ask_volume_three();
  ask_volume_three_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_three)
}

// required double bid_price_four = 40;
inline bool DepthMarket::has_bid_price_four() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void DepthMarket::set_has_bid_price_four() {
  _has_bits_[1] |= 0x00000040u;
}
inline void DepthMarket::clear_has_bid_price_four() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void DepthMarket::clear_bid_price_four() {
  bid_price_four_ = 0;
  clear_has_bid_price_four();
}
inline double DepthMarket::bid_price_four() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_four)
  return bid_price_four_;
}
inline void DepthMarket::set_bid_price_four(double value) {
  set_has_bid_price_four();
  bid_price_four_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_four)
}

// required int32 bid_volume_four = 41;
inline bool DepthMarket::has_bid_volume_four() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void DepthMarket::set_has_bid_volume_four() {
  _has_bits_[1] |= 0x00000100u;
}
inline void DepthMarket::clear_has_bid_volume_four() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void DepthMarket::clear_bid_volume_four() {
  bid_volume_four_ = 0;
  clear_has_bid_volume_four();
}
inline ::google::protobuf::int32 DepthMarket::bid_volume_four() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_four)
  return bid_volume_four_;
}
inline void DepthMarket::set_bid_volume_four(::google::protobuf::int32 value) {
  set_has_bid_volume_four();
  bid_volume_four_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_four)
}

// required double ask_price_four = 42;
inline bool DepthMarket::has_ask_price_four() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void DepthMarket::set_has_ask_price_four() {
  _has_bits_[1] |= 0x00000200u;
}
inline void DepthMarket::clear_has_ask_price_four() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void DepthMarket::clear_ask_price_four() {
  ask_price_four_ = 0;
  clear_has_ask_price_four();
}
inline double DepthMarket::ask_price_four() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_four)
  return ask_price_four_;
}
inline void DepthMarket::set_ask_price_four(double value) {
  set_has_ask_price_four();
  ask_price_four_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_four)
}

// required int32 ask_volume_four = 43;
inline bool DepthMarket::has_ask_volume_four() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void DepthMarket::set_has_ask_volume_four() {
  _has_bits_[1] |= 0x00000800u;
}
inline void DepthMarket::clear_has_ask_volume_four() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void DepthMarket::clear_ask_volume_four() {
  ask_volume_four_ = 0;
  clear_has_ask_volume_four();
}
inline ::google::protobuf::int32 DepthMarket::ask_volume_four() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_four)
  return ask_volume_four_;
}
inline void DepthMarket::set_ask_volume_four(::google::protobuf::int32 value) {
  set_has_ask_volume_four();
  ask_volume_four_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_four)
}

// required double bid_price_five = 44;
inline bool DepthMarket::has_bid_price_five() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void DepthMarket::set_has_bid_price_five() {
  _has_bits_[1] |= 0x00000400u;
}
inline void DepthMarket::clear_has_bid_price_five() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void DepthMarket::clear_bid_price_five() {
  bid_price_five_ = 0;
  clear_has_bid_price_five();
}
inline double DepthMarket::bid_price_five() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_five)
  return bid_price_five_;
}
inline void DepthMarket::set_bid_price_five(double value) {
  set_has_bid_price_five();
  bid_price_five_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_five)
}

// required int32 bid_volume_five = 45;
inline bool DepthMarket::has_bid_volume_five() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void DepthMarket::set_has_bid_volume_five() {
  _has_bits_[1] |= 0x00001000u;
}
inline void DepthMarket::clear_has_bid_volume_five() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void DepthMarket::clear_bid_volume_five() {
  bid_volume_five_ = 0;
  clear_has_bid_volume_five();
}
inline ::google::protobuf::int32 DepthMarket::bid_volume_five() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_five)
  return bid_volume_five_;
}
inline void DepthMarket::set_bid_volume_five(::google::protobuf::int32 value) {
  set_has_bid_volume_five();
  bid_volume_five_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_five)
}

// required double ask_price_five = 46;
inline bool DepthMarket::has_ask_price_five() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void DepthMarket::set_has_ask_price_five() {
  _has_bits_[1] |= 0x00002000u;
}
inline void DepthMarket::clear_has_ask_price_five() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void DepthMarket::clear_ask_price_five() {
  ask_price_five_ = 0;
  clear_has_ask_price_five();
}
inline double DepthMarket::ask_price_five() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_five)
  return ask_price_five_;
}
inline void DepthMarket::set_ask_price_five(double value) {
  set_has_ask_price_five();
  ask_price_five_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_five)
}

// required int32 ask_volume_five = 47;
inline bool DepthMarket::has_ask_volume_five() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void DepthMarket::set_has_ask_volume_five() {
  _has_bits_[1] |= 0x00008000u;
}
inline void DepthMarket::clear_has_ask_volume_five() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void DepthMarket::clear_ask_volume_five() {
  ask_volume_five_ = 0;
  clear_has_ask_volume_five();
}
inline ::google::protobuf::int32 DepthMarket::ask_volume_five() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_five)
  return ask_volume_five_;
}
inline void DepthMarket::set_ask_volume_five(::google::protobuf::int32 value) {
  set_has_ask_volume_five();
  ask_volume_five_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_five)
}

// required double bid_price_six = 48;
inline bool DepthMarket::has_bid_price_six() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void DepthMarket::set_has_bid_price_six() {
  _has_bits_[1] |= 0x00004000u;
}
inline void DepthMarket::clear_has_bid_price_six() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void DepthMarket::clear_bid_price_six() {
  bid_price_six_ = 0;
  clear_has_bid_price_six();
}
inline double DepthMarket::bid_price_six() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_six)
  return bid_price_six_;
}
inline void DepthMarket::set_bid_price_six(double value) {
  set_has_bid_price_six();
  bid_price_six_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_six)
}

// required int32 bid_volume_six = 49;
inline bool DepthMarket::has_bid_volume_six() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void DepthMarket::set_has_bid_volume_six() {
  _has_bits_[1] |= 0x00010000u;
}
inline void DepthMarket::clear_has_bid_volume_six() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void DepthMarket::clear_bid_volume_six() {
  bid_volume_six_ = 0;
  clear_has_bid_volume_six();
}
inline ::google::protobuf::int32 DepthMarket::bid_volume_six() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_six)
  return bid_volume_six_;
}
inline void DepthMarket::set_bid_volume_six(::google::protobuf::int32 value) {
  set_has_bid_volume_six();
  bid_volume_six_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_six)
}

// required double ask_price_six = 50;
inline bool DepthMarket::has_ask_price_six() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void DepthMarket::set_has_ask_price_six() {
  _has_bits_[1] |= 0x00020000u;
}
inline void DepthMarket::clear_has_ask_price_six() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void DepthMarket::clear_ask_price_six() {
  ask_price_six_ = 0;
  clear_has_ask_price_six();
}
inline double DepthMarket::ask_price_six() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_six)
  return ask_price_six_;
}
inline void DepthMarket::set_ask_price_six(double value) {
  set_has_ask_price_six();
  ask_price_six_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_six)
}

// required int32 ask_volume_six = 51;
inline bool DepthMarket::has_ask_volume_six() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void DepthMarket::set_has_ask_volume_six() {
  _has_bits_[1] |= 0x00080000u;
}
inline void DepthMarket::clear_has_ask_volume_six() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void DepthMarket::clear_ask_volume_six() {
  ask_volume_six_ = 0;
  clear_has_ask_volume_six();
}
inline ::google::protobuf::int32 DepthMarket::ask_volume_six() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_six)
  return ask_volume_six_;
}
inline void DepthMarket::set_ask_volume_six(::google::protobuf::int32 value) {
  set_has_ask_volume_six();
  ask_volume_six_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_six)
}

// required double bid_price_seven = 52;
inline bool DepthMarket::has_bid_price_seven() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void DepthMarket::set_has_bid_price_seven() {
  _has_bits_[1] |= 0x00040000u;
}
inline void DepthMarket::clear_has_bid_price_seven() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void DepthMarket::clear_bid_price_seven() {
  bid_price_seven_ = 0;
  clear_has_bid_price_seven();
}
inline double DepthMarket::bid_price_seven() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_seven)
  return bid_price_seven_;
}
inline void DepthMarket::set_bid_price_seven(double value) {
  set_has_bid_price_seven();
  bid_price_seven_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_seven)
}

// required int32 bid_volume_seven = 53;
inline bool DepthMarket::has_bid_volume_seven() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void DepthMarket::set_has_bid_volume_seven() {
  _has_bits_[1] |= 0x00100000u;
}
inline void DepthMarket::clear_has_bid_volume_seven() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void DepthMarket::clear_bid_volume_seven() {
  bid_volume_seven_ = 0;
  clear_has_bid_volume_seven();
}
inline ::google::protobuf::int32 DepthMarket::bid_volume_seven() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_seven)
  return bid_volume_seven_;
}
inline void DepthMarket::set_bid_volume_seven(::google::protobuf::int32 value) {
  set_has_bid_volume_seven();
  bid_volume_seven_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_seven)
}

// required double ask_price_seven = 54;
inline bool DepthMarket::has_ask_price_seven() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void DepthMarket::set_has_ask_price_seven() {
  _has_bits_[1] |= 0x00200000u;
}
inline void DepthMarket::clear_has_ask_price_seven() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void DepthMarket::clear_ask_price_seven() {
  ask_price_seven_ = 0;
  clear_has_ask_price_seven();
}
inline double DepthMarket::ask_price_seven() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_seven)
  return ask_price_seven_;
}
inline void DepthMarket::set_ask_price_seven(double value) {
  set_has_ask_price_seven();
  ask_price_seven_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_seven)
}

// required int32 ask_volume_seven = 55;
inline bool DepthMarket::has_ask_volume_seven() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void DepthMarket::set_has_ask_volume_seven() {
  _has_bits_[1] |= 0x00800000u;
}
inline void DepthMarket::clear_has_ask_volume_seven() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void DepthMarket::clear_ask_volume_seven() {
  ask_volume_seven_ = 0;
  clear_has_ask_volume_seven();
}
inline ::google::protobuf::int32 DepthMarket::ask_volume_seven() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_seven)
  return ask_volume_seven_;
}
inline void DepthMarket::set_ask_volume_seven(::google::protobuf::int32 value) {
  set_has_ask_volume_seven();
  ask_volume_seven_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_seven)
}

// required double bid_price_eight = 56;
inline bool DepthMarket::has_bid_price_eight() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void DepthMarket::set_has_bid_price_eight() {
  _has_bits_[1] |= 0x00400000u;
}
inline void DepthMarket::clear_has_bid_price_eight() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void DepthMarket::clear_bid_price_eight() {
  bid_price_eight_ = 0;
  clear_has_bid_price_eight();
}
inline double DepthMarket::bid_price_eight() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_eight)
  return bid_price_eight_;
}
inline void DepthMarket::set_bid_price_eight(double value) {
  set_has_bid_price_eight();
  bid_price_eight_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_eight)
}

// required int32 bid_volume_eight = 57;
inline bool DepthMarket::has_bid_volume_eight() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void DepthMarket::set_has_bid_volume_eight() {
  _has_bits_[1] |= 0x01000000u;
}
inline void DepthMarket::clear_has_bid_volume_eight() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void DepthMarket::clear_bid_volume_eight() {
  bid_volume_eight_ = 0;
  clear_has_bid_volume_eight();
}
inline ::google::protobuf::int32 DepthMarket::bid_volume_eight() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_eight)
  return bid_volume_eight_;
}
inline void DepthMarket::set_bid_volume_eight(::google::protobuf::int32 value) {
  set_has_bid_volume_eight();
  bid_volume_eight_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_eight)
}

// required double ask_price_eight = 58;
inline bool DepthMarket::has_ask_price_eight() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void DepthMarket::set_has_ask_price_eight() {
  _has_bits_[1] |= 0x02000000u;
}
inline void DepthMarket::clear_has_ask_price_eight() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void DepthMarket::clear_ask_price_eight() {
  ask_price_eight_ = 0;
  clear_has_ask_price_eight();
}
inline double DepthMarket::ask_price_eight() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_eight)
  return ask_price_eight_;
}
inline void DepthMarket::set_ask_price_eight(double value) {
  set_has_ask_price_eight();
  ask_price_eight_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_eight)
}

// required int32 ask_volume_eight = 59;
inline bool DepthMarket::has_ask_volume_eight() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void DepthMarket::set_has_ask_volume_eight() {
  _has_bits_[1] |= 0x08000000u;
}
inline void DepthMarket::clear_has_ask_volume_eight() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void DepthMarket::clear_ask_volume_eight() {
  ask_volume_eight_ = 0;
  clear_has_ask_volume_eight();
}
inline ::google::protobuf::int32 DepthMarket::ask_volume_eight() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_eight)
  return ask_volume_eight_;
}
inline void DepthMarket::set_ask_volume_eight(::google::protobuf::int32 value) {
  set_has_ask_volume_eight();
  ask_volume_eight_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_eight)
}

// required double bid_price_nine = 60;
inline bool DepthMarket::has_bid_price_nine() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void DepthMarket::set_has_bid_price_nine() {
  _has_bits_[1] |= 0x04000000u;
}
inline void DepthMarket::clear_has_bid_price_nine() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void DepthMarket::clear_bid_price_nine() {
  bid_price_nine_ = 0;
  clear_has_bid_price_nine();
}
inline double DepthMarket::bid_price_nine() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_nine)
  return bid_price_nine_;
}
inline void DepthMarket::set_bid_price_nine(double value) {
  set_has_bid_price_nine();
  bid_price_nine_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_nine)
}

// required int32 bid_volume_nine = 61;
inline bool DepthMarket::has_bid_volume_nine() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void DepthMarket::set_has_bid_volume_nine() {
  _has_bits_[1] |= 0x10000000u;
}
inline void DepthMarket::clear_has_bid_volume_nine() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void DepthMarket::clear_bid_volume_nine() {
  bid_volume_nine_ = 0;
  clear_has_bid_volume_nine();
}
inline ::google::protobuf::int32 DepthMarket::bid_volume_nine() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_nine)
  return bid_volume_nine_;
}
inline void DepthMarket::set_bid_volume_nine(::google::protobuf::int32 value) {
  set_has_bid_volume_nine();
  bid_volume_nine_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_nine)
}

// required double ask_price_nine = 62;
inline bool DepthMarket::has_ask_price_nine() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void DepthMarket::set_has_ask_price_nine() {
  _has_bits_[1] |= 0x20000000u;
}
inline void DepthMarket::clear_has_ask_price_nine() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void DepthMarket::clear_ask_price_nine() {
  ask_price_nine_ = 0;
  clear_has_ask_price_nine();
}
inline double DepthMarket::ask_price_nine() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_nine)
  return ask_price_nine_;
}
inline void DepthMarket::set_ask_price_nine(double value) {
  set_has_ask_price_nine();
  ask_price_nine_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_nine)
}

// required int32 ask_volume_nine = 63;
inline bool DepthMarket::has_ask_volume_nine() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void DepthMarket::set_has_ask_volume_nine() {
  _has_bits_[1] |= 0x80000000u;
}
inline void DepthMarket::clear_has_ask_volume_nine() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void DepthMarket::clear_ask_volume_nine() {
  ask_volume_nine_ = 0;
  clear_has_ask_volume_nine();
}
inline ::google::protobuf::int32 DepthMarket::ask_volume_nine() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_nine)
  return ask_volume_nine_;
}
inline void DepthMarket::set_ask_volume_nine(::google::protobuf::int32 value) {
  set_has_ask_volume_nine();
  ask_volume_nine_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_nine)
}

// required double bid_price_ten = 64;
inline bool DepthMarket::has_bid_price_ten() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void DepthMarket::set_has_bid_price_ten() {
  _has_bits_[1] |= 0x40000000u;
}
inline void DepthMarket::clear_has_bid_price_ten() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void DepthMarket::clear_bid_price_ten() {
  bid_price_ten_ = 0;
  clear_has_bid_price_ten();
}
inline double DepthMarket::bid_price_ten() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_price_ten)
  return bid_price_ten_;
}
inline void DepthMarket::set_bid_price_ten(double value) {
  set_has_bid_price_ten();
  bid_price_ten_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_price_ten)
}

// required int32 bid_volume_ten = 65;
inline bool DepthMarket::has_bid_volume_ten() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void DepthMarket::set_has_bid_volume_ten() {
  _has_bits_[2] |= 0x00000001u;
}
inline void DepthMarket::clear_has_bid_volume_ten() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void DepthMarket::clear_bid_volume_ten() {
  bid_volume_ten_ = 0;
  clear_has_bid_volume_ten();
}
inline ::google::protobuf::int32 DepthMarket::bid_volume_ten() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.bid_volume_ten)
  return bid_volume_ten_;
}
inline void DepthMarket::set_bid_volume_ten(::google::protobuf::int32 value) {
  set_has_bid_volume_ten();
  bid_volume_ten_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.bid_volume_ten)
}

// required double ask_price_ten = 66;
inline bool DepthMarket::has_ask_price_ten() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void DepthMarket::set_has_ask_price_ten() {
  _has_bits_[2] |= 0x00000002u;
}
inline void DepthMarket::clear_has_ask_price_ten() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void DepthMarket::clear_ask_price_ten() {
  ask_price_ten_ = 0;
  clear_has_ask_price_ten();
}
inline double DepthMarket::ask_price_ten() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_price_ten)
  return ask_price_ten_;
}
inline void DepthMarket::set_ask_price_ten(double value) {
  set_has_ask_price_ten();
  ask_price_ten_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_price_ten)
}

// required int32 ask_volume_ten = 67;
inline bool DepthMarket::has_ask_volume_ten() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void DepthMarket::set_has_ask_volume_ten() {
  _has_bits_[2] |= 0x00000004u;
}
inline void DepthMarket::clear_has_ask_volume_ten() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void DepthMarket::clear_ask_volume_ten() {
  ask_volume_ten_ = 0;
  clear_has_ask_volume_ten();
}
inline ::google::protobuf::int32 DepthMarket::ask_volume_ten() const {
  // @@protoc_insertion_point(field_get:simnow_logic.DepthMarket.ask_volume_ten)
  return ask_volume_ten_;
}
inline void DepthMarket::set_ask_volume_ten(::google::protobuf::int32 value) {
  set_has_ask_volume_ten();
  ask_volume_ten_ = value;
  // @@protoc_insertion_point(field_set:simnow_logic.DepthMarket.ask_volume_ten)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace simnow_logic

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_depth_5fmarket_2eproto__INCLUDED
