# Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.


# Where to find user code.

LIB_DIR = ./../../../../library
USER_DIR = ./../../pub
SO_DIR = ./../../bin/plugins

THIRD_PATH = $(LIB_DIR)/mylib/public

CUSTOM_THIRD_PATH = $(LIB_DIR)/mylib/third_party

LINK_PATHS = -L./ -L/usr/local/libmemcached-1.0.7/lib/  -L/usr/lib64/mysql

# Flags passed to the preprocessor.
CPPFLAGS += -isystem -shared -fPIC -D_DB_POOL_ -D_DEBUG -DUSR_LOG_MSG\
	-D_DIC_POOL_ -D_REENTRANT -D_GNU_SOURCE -DUSR_LOG_ERROR -DUSR_LOG_MSG\
	-DPIPE_WORK -DHEAD_SHORT -DRECORD_MARKET

#CPPFLAGS += -isystem -shared -fPIC -D_DB_POOL_\
	-D_DIC_POOL_ -D_REENTRANT -D_GNU_SOURCE -DUSR_LOG_ERROR -DUSR_LOG_MSG\
	-DNET_WORK -DHEAD_SHORT

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -Wno-unused-parameter -pthread -shared -fPIC
#CXXFLAGS += -Wextra -pthread -shared -fPIC

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
PLUGIN = $(SO_DIR)/future/future.so

#You may try to include library headers using -isystem instead of -I. This will make them "system headers" and GCC won't report warnings for them.
INCLUDE_PATHS = -isystem/usr/local/libmemcached-1.0.7/include \
				-isystem$(LIB_DIR)/BasicCore \
				-isystem$(THIRD_PATH)\
				-isystem/usr/local/include\
				-isystem/usr/include/mysql\
				-isystem$(USER_DIR)\
				-isystem$(CUSTOM_THIRD_PATH)/hiredis\
				-isystem$(CUSTOM_THIRD_PATH)\
				-isystem$(CUSTOM_THIRD_PATH)/librdkafka/src\
				-isystem$(LIB_DIR)/mylib/base\
				-isystem../\
				-isystem../../\



# House-keeping build targets.

ALL_HEADERS = $(USER_HEADERS)
all : $(PLUGIN)

clean :
	rm -f $(PLUGIN)  *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
#GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
#gtest-all.o : $(GTEST_SRCS_)
#	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

#gtest_main.o : $(GTEST_SRCS_)
#	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

#gtest.a : gtest-all.o
#	$(AR) $(ARFLAGS) $@ $^

#gtest_main.a : gtest-all.o gtest_main.o
#	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.


index_engine.o : ./index_engine.cc ./index_engine.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./index_engine.cc $(INCLUDE_PATHS)

static_engine.o : ./static_engine.cc ./static_engine.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./static_engine.cc $(INCLUDE_PATHS)

data_engine.o : ./data_engine.cc ./data_engine.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./data_engine.cc $(INCLUDE_PATHS)

future_engine.o : ./future_engine.cc ./future_engine.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./future_engine.cc $(INCLUDE_PATHS)

future_init.o : ./future_init.cc ./future_init.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./future_init.cc $(INCLUDE_PATHS)

future_logic.o : ./future_logic.cc ./future_logic.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./future_logic.cc $(INCLUDE_PATHS)

future_infos.o : ./future_infos.cc ./future_infos.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./future_infos.cc $(INCLUDE_PATHS)

future_file.o : ./future_file.cc ./future_file.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./future_file.cc $(INCLUDE_PATHS)

future_value_buf.o : ./future_value_buf.cc ./future_value_buf.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./future_value_buf.cc $(INCLUDE_PATHS)

symbol_static.pb.o : ./../../proto/symbol_static.pb.cc ./../../proto/symbol_static.pb.h 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./../../proto/symbol_static.pb.cc

symbol_pos_index.pb.o : ./../../proto/symbol_pos_index.pb.cc  ./../../proto/symbol_pos_index.pb.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./../../proto/symbol_pos_index.pb.cc

symbol_dynam_market.pb.o : ./../../proto/symbol_dynam_market.pb.cc  ./../../proto/symbol_dynam_market.pb.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./../../proto/symbol_dynam_market.pb.cc

time.o : ./../../pub/logic/time.cc ./../../pub/logic/time.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./../../pub/logic/time.cc $(INCLUDE_PATHS)

logic_unit.o : ./../../pub/logic/logic_unit.cc ./../../pub/logic/logic_unit.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./../../pub/logic/logic_unit.cc $(INCLUDE_PATHS)
	
packet_processing.o : ./../../pub/net/packet_processing.cc ./../../pub/net/packet_processing.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c ./../../pub/net/packet_processing.cc $(INCLUDE_PATHS)

$(PLUGIN) : index_engine.o static_engine.o data_engine.o future_engine.o future_value_buf.o packet_processing.o\
		future_init.o future_logic.o future_infos.o future_logic.o future_file.o time.o logic_unit.o\
		symbol_static.pb.o symbol_pos_index.pb.o symbol_dynam_market.pb.o\
	$(LIB_DIR)/mylib/base/lib/mybase.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LINK_PATHS) -liconv -lprotobuf -lpthread -lexpat -lrt -ldl \
	$^ -o $@
